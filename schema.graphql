"""Autogenerated input type of AcceptZenhubOrganizationInvite"""
input AcceptZenhubOrganizationInviteInput {
  token: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AcceptZenhubOrganizationInvite"""
type AcceptZenhubOrganizationInvitePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  zenhubOrganization: ZenhubOrganization!
}

"""Autogenerated input type of AddAssigneesToIssues"""
input AddAssigneesToIssuesInput {
  issueIds: [ID!]!
  assigneeIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddAssigneesToIssues"""
type AddAssigneesToIssuesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  successCount: Int!
  unassignable: [Unassignable!]!
}

"""Autogenerated input type of AddEpicsToProject"""
input AddEpicsToProjectInput {
  projectId: ID!
  epicIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddEpicsToProject"""
type AddEpicsToProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epics: [Epic!]!
  previousProjects: [Project]!
  project: Project!
}

"""Autogenerated input type of AddEpicsToRoadmap"""
input AddEpicsToRoadmapInput {
  epicIds: [ID!]!
  roadmapId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddEpicsToRoadmap"""
type AddEpicsToRoadmapPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epics: [Epic!]!
  roadmap: Roadmap!
}

"""Autogenerated input type of AddEstimateSetValue"""
input AddEstimateSetValueInput {
  repositoryGhId: Int!
  value: Float!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddEstimateSetValue"""
type AddEstimateSetValuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  estimateSet: EstimateSet!
}

"""Autogenerated input type of AddIssuesToEpics"""
input AddIssuesToEpicsInput {
  issueIds: [ID!]!
  epicIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddIssuesToEpics"""
type AddIssuesToEpicsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epics: [Epic!]!
}

"""Autogenerated input type of AddIssuesToReleases"""
input AddIssuesToReleasesInput {
  issueIds: [ID!]!
  releaseIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddIssuesToReleases"""
type AddIssuesToReleasesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  releases: [Release!]!
}

"""Autogenerated input type of AddIssuesToSprints"""
input AddIssuesToSprintsInput {
  issueIds: [ID!]!
  sprintIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddIssuesToSprints"""
type AddIssuesToSprintsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  sprintIssues: [SprintIssue!]!
}

"""Autogenerated input type of AddLabelsToIssues"""
input AddLabelsToIssuesInput {
  issueIds: [ID!]!
  labelIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddLabelsToIssues"""
type AddLabelsToIssuesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  successCount: Int!
}

"""Autogenerated input type of AddProjectsToRoadmap"""
input AddProjectsToRoadmapInput {
  roadmapId: ID!
  projectIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddProjectsToRoadmap"""
type AddProjectsToRoadmapPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  projects: [Project!]!
  roadmap: Roadmap!
}

"""Autogenerated input type of AddRepositoriesToRelease"""
input AddRepositoriesToReleaseInput {
  repositoryGhIds: [Int!]!
  releaseId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddRepositoriesToRelease"""
type AddRepositoriesToReleasePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  release: Release!
}

"""Autogenerated input type of AddRepositoryToWorkspace"""
input AddRepositoryToWorkspaceInput {
  workspaceId: ID!
  repositoryGhId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddRepositoryToWorkspace"""
type AddRepositoryToWorkspacePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspaceRepository: WorkspaceRepository!
}

"""Autogenerated input type of AddWorkspaceLabelFilters"""
input AddWorkspaceLabelFiltersInput {
  workspaceId: ID!
  labelNames: [String!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddWorkspaceLabelFilters"""
type AddWorkspaceLabelFiltersPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!

  """created label filters"""
  workspaceLabelFilters: [WorkspaceLabelFilter!]!
}

type AnomalousIssue {
  duration: Int!
  issue: Issue!
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

type Blockage implements Node & Timestamps {
  blocked: IssueDependencyItem!
  blocking: IssueDependencyItem!
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
}

type Bot implements Owner & Timestamps {
  avatarUrl: String!
  createdAt: ISO8601DateTime!
  ghId: Int
  hasWorkspace: Boolean!
  id: ID!
  login: String!
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectConnection!
  repositoryFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryFavoriteConnection!
  roadmapItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RoadmapItemConnection!
  searchWorkspaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    query: String!
    repositoryGhIds: [Int!]
  ): WorkspaceSearchMatchConnection!
  type: String!
  updatedAt: ISO8601DateTime!
  workspaceFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkspaceFavoriteConnection!
}

enum BucketIssueHistoryAction {
  ISSUE_ADDED
  ISSUE_REMOVED
}

"""Autogenerated input type of CloseIssues"""
input CloseIssuesInput {
  issueIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CloseIssues"""
type CloseIssuesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  successCount: Int!
}

"""Autogenerated input type of CreateEpicFromIssue"""
input CreateEpicFromIssueInput {
  issueId: ID!
  epicChildIds: [ID!]

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateEpicFromIssue"""
type CreateEpicFromIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
}

"""Autogenerated input type of CreateEpic"""
input CreateEpicInput {
  issue: IssueInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of CreateEpicOnProject"""
input CreateEpicOnProjectInput {
  projectId: ID!
  epic: EpicInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateEpicOnProject"""
type CreateEpicOnProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
  project: Project!
}

"""Autogenerated input type of CreateEpicOnRoadmap"""
input CreateEpicOnRoadmapInput {
  roadmapId: ID!
  epic: EpicInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateEpicOnRoadmap"""
type CreateEpicOnRoadmapPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
  roadmap: Roadmap!
}

"""Autogenerated return type of CreateEpic"""
type CreateEpicPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
}

"""Autogenerated input type of CreateIssueDependency"""
input CreateIssueDependencyInput {
  blockingIssue: IssueInfoInput!
  blockedIssue: IssueInfoInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateIssueDependency"""
type CreateIssueDependencyPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueDependency: IssueDependency!
}

"""Autogenerated input type of CreateIssue"""
input CreateIssueInput {
  repositoryId: ID!
  title: String!
  body: String
  labels: [String!]
  assignees: [String!]

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateIssue"""
type CreateIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: Issue!
}

"""Autogenerated input type of CreateIssuePrConnection"""
input CreateIssuePrConnectionInput {
  issueId: ID!
  pullRequestId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateIssuePrConnection"""
type CreateIssuePrConnectionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: Issue!
  pullRequest: Issue!
}

"""Autogenerated input type of CreatePipeline"""
input CreatePipelineInput {
  workspaceId: ID!
  name: String!
  position: Int = -1
  description: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreatePipeline"""
type CreatePipelinePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipeline: Pipeline!
}

"""Autogenerated input type of CreatePipelineToPipelineAutomation"""
input CreatePipelineToPipelineAutomationInput {
  sourcePipelineId: ID!
  destinationPipelineId: ID!
  applyRetroactively: Boolean = false

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreatePipelineToPipelineAutomation"""
type CreatePipelineToPipelineAutomationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  movedIssuesCount: Int
  pipelineToPipelineAutomation: PipelineToPipelineAutomation!
}

"""Autogenerated input type of CreateProjectOnRoadmap"""
input CreateProjectOnRoadmapInput {
  roadmapId: ID!
  project: ProjectInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateProjectOnRoadmap"""
type CreateProjectOnRoadmapPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  project: Project!
  roadmap: Roadmap!
}

"""Autogenerated input type of CreateRelease"""
input CreateReleaseInput {
  release: ReleaseCreateInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateRelease"""
type CreateReleasePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  release: Release!
}

"""Autogenerated input type of CreateSprintConfig"""
input CreateSprintConfigInput {
  sprintConfig: SprintConfigCreateInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateSprintConfig"""
type CreateSprintConfigPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  sprintConfig: SprintConfig!
}

"""Autogenerated input type of CreateWorkspace"""
input CreateWorkspaceInput {
  name: String!
  description: String
  zenhubOrganizationId: ID
  repositoryGhIds: [Int!]
  defaultRepositoryGhId: Int
  githubProject: GithubProjectInput

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateWorkspace"""
type CreateWorkspacePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!
}

"""Autogenerated input type of CreateZenhubOrganization"""
input CreateZenhubOrganizationInput {
  name: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of CreateZenhubOrganizationInvite"""
input CreateZenhubOrganizationInviteInput {
  zenhubOrganizationId: ID!
  expireInDays: Int!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateZenhubOrganizationInvite"""
type CreateZenhubOrganizationInvitePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  token: String!
}

"""Autogenerated return type of CreateZenhubOrganization"""
type CreateZenhubOrganizationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  zenhubOrganization: ZenhubOrganization!
}

"""Autogenerated input type of DeleteEpicByIssueInfo"""
input DeleteEpicByIssueInfoInput {
  issue: IssueInfoInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteEpicByIssueInfo"""
type DeleteEpicByIssueInfoPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
}

"""Autogenerated input type of DeleteIssueDependency"""
input DeleteIssueDependencyInput {
  blockingIssue: IssueInfoInput!
  blockedIssue: IssueInfoInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteIssueDependency"""
type DeleteIssueDependencyPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueDependency: IssueDependency!
}

"""Autogenerated input type of DeleteIssuePrConnection"""
input DeleteIssuePrConnectionInput {
  issueId: ID!
  pullRequestId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteIssuePrConnection"""
type DeleteIssuePrConnectionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: Issue!
  pullRequest: Issue!
}

"""Autogenerated input type of DeletePipeline"""
input DeletePipelineInput {
  pipelineId: ID!
  destinationPipelineId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeletePipeline"""
type DeletePipelinePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  destinationPipeline: Pipeline!
}

"""Autogenerated input type of DeletePipelineToPipelineAutomation"""
input DeletePipelineToPipelineAutomationInput {
  pipelineToPipelineAutomationId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeletePipelineToPipelineAutomation"""
type DeletePipelineToPipelineAutomationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipelineToPipelineAutomation: PipelineToPipelineAutomation!
}

"""Autogenerated input type of DeleteProject"""
input DeleteProjectInput {
  projectId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteProject"""
type DeleteProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  projectId: ID!
}

"""Autogenerated input type of DeleteSprintConfigAndOpenSprints"""
input DeleteSprintConfigAndOpenSprintsInput {
  workspaceId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteSprintConfigAndOpenSprints"""
type DeleteSprintConfigAndOpenSprintsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!
}

"""Autogenerated input type of DeleteWorkspaceFavorite"""
input DeleteWorkspaceFavoriteInput {
  workspaceId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteWorkspaceFavorite"""
type DeleteWorkspaceFavoritePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!
}

"""Autogenerated input type of DeleteWorkspace"""
input DeleteWorkspaceInput {
  workspaceId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteWorkspace"""
type DeleteWorkspacePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspaceId: ID!
}

"""Autogenerated input type of DeleteZenhubUser"""
input DeleteZenhubUserInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteZenhubUser"""
type DeleteZenhubUserPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  zenhubUserId: ID!
}

"""Autogenerated input type of DisconnectWorkspaceRepository"""
input DisconnectWorkspaceRepositoryInput {
  workspaceId: ID!
  repositoryGhId: Int!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DisconnectWorkspaceRepository"""
type DisconnectWorkspaceRepositoryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!
}

enum DisplayFilter {
  """Includes Issues and PRs"""
  all

  """Includes only Issues"""
  issues

  """Includes only PRs"""
  prs
}

type Epic implements Node & Timestamps & ViewerPermission & IssueProgress {
  childIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filters: IssueFiltersInput
  ): IssueConnection!
  createdAt: ISO8601DateTime!
  endOn: ISO8601Date
  id: ID!
  issue: Issue!
  issueCountProgress: IssueCountProgress
  issueEstimateProgress: IssueEstimateProgress
  project: Project
  startOn: ISO8601Date
  updatedAt: ISO8601DateTime!
  viewerPermission: PermissionLevel!
}

"""Filter issue search results"""
input EpicAssignableIssueSearchFiltersInput {
  repositoryIds: [ID!]!
  pipelineIds: [ID!]!
}

"""The connection type for Epic."""
type EpicConnection {
  """A list of edges."""
  edges: [EpicEdge!]!

  """A list of nodes."""
  nodes: [Epic!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type EpicEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Epic!
}

input EpicInput {
  issue: IssueInput!
}

enum EpicOrderField {
  CREATED_AT
  TITLE
}

"""Order of Epic connection"""
input EpicOrderInput {
  direction: OrderDirection
  field: EpicOrderField
}

"""Filter issues by special epic filters"""
input EpicSearchFiltersInput {
  id: IdInput
  specialFilters: EpicSpecialFilter
}

enum EpicSpecialFilter {
  """Show all epics and subtasks"""
  epics_with_subtasks

  """Show all epics and hide subtasks"""
  epics_only

  """Show all issues not in an epic"""
  not_in_epic

  """Hide epics"""
  no_epics
}

type Estimate implements Timestamps {
  createdAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
  value: Float!
}

"""Filter issues by special estimate filters"""
input EstimateSearchFiltersInput {
  values: FloatInput
  specialFilters: EstimateSpecialFilter
}

type EstimateSet {
  repository: Repository!
  values: [Float!]!
}

enum EstimateSpecialFilter {
  """Issues assigned for voting"""
  assigned_for_voting

  """Issues assigned to user for voting"""
  assigned_to_user_for_voting
}

type EstimationGroup {
  id: ID!
  inviter: ZenhubUser!
  participants(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    issueIds: [ID!]!
  ): ZenhubUserConnection!
  workspace: Workspace!
}

"""The connection type for EstimationGroup."""
type EstimationGroupConnection {
  """A list of edges."""
  edges: [EstimationGroupEdge!]!

  """A list of nodes."""
  nodes: [EstimationGroup!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type EstimationGroupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: EstimationGroup!
}

type EstimationVote implements Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  issue: Issue!
  updatedAt: ISO8601DateTime!
  value: Float
  voter: ZenhubUser!
}

"""The connection type for EstimationVote."""
type EstimationVoteConnection {
  """A list of edges."""
  edges: [EstimationVoteEdge!]!

  """A list of nodes."""
  nodes: [EstimationVote!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type EstimationVoteEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: EstimationVote!
}

"""Filter a String column"""
input FloatInput {
  notInAny: Boolean = false
  in: [Float!]
  nin: [Float!]
}

"""
A reference to a GitHub project via Github repository node id and repository id
"""
input GithubProjectInput {
  githubProjectId: String!
  githubProjectRepoGhId: Int!
}

interface GithubTimestamps {
  ghCreatedAt: ISO8601DateTime!
  ghUpdatedAt: ISO8601DateTime!
}

"""Filter an ID column"""
input IdInput {
  notInAny: Boolean = false
  in: [ID!]
  nin: [ID!]
}

"""An ISO 8601-encoded date"""
scalar ISO8601Date

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

type Issue implements Node & GithubTimestamps & Timestamps & ViewerPermission {
  assignees(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!

  """Issues that are blocked by this Issue."""
  blockedIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filters: IssueFiltersInput
  ): IssueConnection!

  """Dependent items that are blocked by this issue"""
  blockedItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filters: IssueDependencyItemFiltersInput
  ): IssueDependencyItemConnection!

  """Issues that are blocking this Issue."""
  blockingIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filters: IssueFiltersInput
  ): IssueConnection!

  """Dependent items that are blocking this issue"""
  blockingItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    filters: IssueDependencyItemFiltersInput
  ): IssueDependencyItemConnection!
  body: String
  closedAt: ISO8601DateTime

  """1st step connections of the PR. Only available for PRs"""
  connections(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): IssueConnection!
  createdAt: ISO8601DateTime!
  epic: Epic
  estimate: Estimate
  estimationVotes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): EstimationVoteConnection!
  ghCreatedAt: ISO8601DateTime!
  ghId: Int
  ghNodeId: ID
  ghUpdatedAt: ISO8601DateTime!
  htmlUrl: String!
  id: ID!
  labels(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): LabelConnection!
  number: Int!
  parentEpics(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): EpicConnection!
  pipelineIssue(workspaceId: ID!): PipelineIssue
  pipelineIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PipelineIssueConnection!
  pullRequest: Boolean!
  pullRequestObject: PullRequest
  pullRequestReviews(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PullRequestReviewConnection
  releases(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ReleaseConnection!
  repository: Repository!
  reviewRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ReviewRequestConnection
  sprints(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    workspaceId: ID
  ): SprintConnection!
  state: IssueState!
  timelineItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): TimelineItemConnection!
  title: String!
  updatedAt: ISO8601DateTime!
  user: Owner!
  viewerPermission: PermissionLevel!
}

"""The connection type for Issue."""
type IssueConnection {
  """A list of edges."""
  edges: [IssueEdge!]!

  """A list of nodes."""
  nodes: [Issue!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  pipelineCounts: PipelineCounts!
  splitCounts: JSON! @deprecated(reason: "Use common field pipelineCounts instead")
  sumEstimates: Float! @deprecated(reason: "Use common field pipelineCounts instead")
  totalCount: Int!
}

type IssueCountProgress {
  closed: Int!
  open: Int!
  total: Int!
}

type IssueDependency implements Node & Timestamps {
  blockedIssue: Issue!
  blockingIssue: Issue!
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
}

"""The connection type for IssueDependency."""
type IssueDependencyConnection {
  """A list of edges."""
  edges: [IssueDependencyEdge!]!

  """A list of nodes."""
  nodes: [IssueDependency!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type IssueDependencyEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: IssueDependency!
}

union IssueDependencyItem = Issue

"""The connection type for IssueDependencyItem."""
type IssueDependencyItemConnection {
  """A list of edges."""
  edges: [IssueDependencyItemEdge!]!

  """A list of nodes."""
  nodes: [IssueDependencyItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type IssueDependencyItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: IssueDependencyItem
}

"""Filter source/target fields in issue dependency"""
input IssueDependencyItemFiltersInput {
  state: IssueDependencyItemStateInput
}

enum IssueDependencyItemState {
  OPEN
  CLOSED
}

"""Filter by IssueDependencyItemState"""
input IssueDependencyItemStateInput {
  eq: IssueDependencyItemState!
}

"""An edge in a connection."""
type IssueEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Issue!
}

type IssueEstimateProgress {
  closed: Float!
  open: Float!
  total: Float!
}

"""Filter Issues"""
input IssueFiltersInput {
  repositoryId: IdInput
  state: IssueStateInput
}

type IssueFlowStats {
  anomalies: [AnomalousIssue!]
  avgCycleDays: Int
  inDevelopmentDays: Int
  inReviewDays: Int
}

"""
A reference to a GitHub issue via Github repository id and issue number
"""
input IssueInfoInput {
  repositoryGhId: Int!
  issueNumber: Int!
}

input IssueInput {
  repositoryId: ID
  repositoryGhId: Int
  title: String!
  body: String
  labels: [String!]
  assignees: [String!]
}

enum IssueOrderField {
  """Order by assignee logins"""
  assignees

  """Order by issue created_at"""
  created_at

  """Order by sprint dates"""
  sprints

  """Order by issue title"""
  title
}

"""Sort issue search results"""
input IssueOrderInput {
  field: IssueOrderField!
  direction: OrderDirection!
}

interface IssueProgress {
  issueCountProgress: IssueCountProgress
  issueEstimateProgress: IssueEstimateProgress
}

"""Filter issue search results"""
input IssueSearchFiltersInput {
  repositoryGhIds: [Int!]
  matchType: MatchingFilter = all
  displayType: DisplayFilter = all
  labels: StringInput
  assignees: StringInput
  users: StringInput
  sprints: IdInput
  releases: IdInput
  estimates: EstimateSearchFiltersInput
  epics: EpicSearchFiltersInput
  zenhubEpics: ZenhubEpicSearchFiltersInput
}

enum IssueState {
  OPEN
  CLOSED
}

"""Filter by IssueState"""
input IssueStateInput {
  eq: IssueState!
}

type IssueTemplate {
  body: String!
  default: Boolean!
  id: ID!
  metadata: JSON
  path: String!
  raw: String!
  repository: Repository!
}

"""The connection type for IssueTemplate."""
type IssueTemplateConnection {
  """A list of edges."""
  edges: [IssueTemplateEdge!]!

  """A list of nodes."""
  nodes: [IssueTemplate!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type IssueTemplateEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: IssueTemplate!
}

"""Represents untyped JSON"""
scalar JSON

type Label implements Timestamps {
  color: String
  createdAt: ISO8601DateTime!
  description: String
  ghId: BigInt!
  ghNodeId: ID!
  id: ID!
  issues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): IssueConnection!
  name: String!
  repository: Repository!
  updatedAt: ISO8601DateTime!
}

"""The connection type for Label."""
type LabelConnection {
  """A list of edges."""
  edges: [LabelEdge!]!

  """A list of nodes."""
  nodes: [Label!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type LabelEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Label!
}

"""Autogenerated input type of LeaveZenhubOrganization"""
input LeaveZenhubOrganizationInput {
  zenhubOrganizationId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of LeaveZenhubOrganization"""
type LeaveZenhubOrganizationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  zenhubOrganization: ZenhubOrganization!
}

type Mannequin implements Owner & Timestamps {
  avatarUrl: String!
  createdAt: ISO8601DateTime!
  ghId: Int
  hasWorkspace: Boolean!
  id: ID!
  login: String!
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectConnection!
  repositoryFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryFavoriteConnection!
  roadmapItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RoadmapItemConnection!
  searchWorkspaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    query: String!
    repositoryGhIds: [Int!]
  ): WorkspaceSearchMatchConnection!
  type: String!
  updatedAt: ISO8601DateTime!
  workspaceFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkspaceFavoriteConnection!
}

enum MatchingFilter {
  """Include records that match any filters"""
  any

  """Include records that match all filters"""
  all
}

"""Autogenerated input type of MoveAllPipelineIssues"""
input MoveAllPipelineIssuesInput {
  pipelineIds: [ID!]!
  destinationPipelineId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of MoveAllPipelineIssues"""
type MoveAllPipelineIssuesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!
}

"""Autogenerated input type of MoveIssue"""
input MoveIssueInput {
  pipelineId: ID!
  issueId: ID!
  position: Int = 0

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of MoveIssue"""
type MoveIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: Issue!
  pipeline: Pipeline!
}

"""Autogenerated input type of MoveIssueRelativeTo"""
input MoveIssueRelativeToInput {
  issueId: ID!
  position: PipelineIssuePosition
  pipelineId: ID
  afterPipelineIssueId: ID
  beforePipelineIssueId: ID

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of MoveIssueRelativeTo"""
type MoveIssueRelativeToPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipelineIssueMove: PipelineIssueMove!
}

"""Autogenerated input type of MovePipelineIssues"""
input MovePipelineIssuesInput {
  pipelineId: ID!
  pipelineIssueIds: [ID!]!
  position: PipelineIssuePosition!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of MovePipelineIssues"""
type MovePipelineIssuesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipeline: Pipeline!
  pipelineIssues: [PipelineIssue!]!
}

"""Autogenerated input type of MoveRoadmapItemRelativeTo"""
input MoveRoadmapItemRelativeToInput {
  roadmapId: ID!
  itemId: ID!
  afterItemId: ID
  beforeItemId: ID

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of MoveRoadmapItemRelativeTo"""
type MoveRoadmapItemRelativeToPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  item: RoadmapItem!
}

type Mutation {
  """Accept ZenhubOrganization invite"""
  acceptZenhubOrganizationInvite(
    """Parameters for AcceptZenhubOrganizationInvite"""
    input: AcceptZenhubOrganizationInviteInput!
  ): AcceptZenhubOrganizationInvitePayload

  """Add assignees to multiple Issues"""
  addAssigneesToIssues(
    """Parameters for AddAssigneesToIssues"""
    input: AddAssigneesToIssuesInput!
  ): AddAssigneesToIssuesPayload

  """Add Epics to a Project"""
  addEpicsToProject(
    """Parameters for AddEpicsToProject"""
    input: AddEpicsToProjectInput!
  ): AddEpicsToProjectPayload

  """Add Epics to a Roadmap"""
  addEpicsToRoadmap(
    """Parameters for AddEpicsToRoadmap"""
    input: AddEpicsToRoadmapInput!
  ): AddEpicsToRoadmapPayload

  """Add a value to an EstimateSet"""
  addEstimateSetValue(
    """Parameters for AddEstimateSetValue"""
    input: AddEstimateSetValueInput!
  ): AddEstimateSetValuePayload

  """Adds Issues to Epics"""
  addIssuesToEpics(
    """Parameters for AddIssuesToEpics"""
    input: AddIssuesToEpicsInput!
  ): AddIssuesToEpicsPayload

  """Add Issues to Releases"""
  addIssuesToReleases(
    """Parameters for AddIssuesToReleases"""
    input: AddIssuesToReleasesInput!
  ): AddIssuesToReleasesPayload

  """Add Issues to Sprints"""
  addIssuesToSprints(
    """Parameters for AddIssuesToSprints"""
    input: AddIssuesToSprintsInput!
  ): AddIssuesToSprintsPayload

  """Add labels to multiple Issues"""
  addLabelsToIssues(
    """Parameters for AddLabelsToIssues"""
    input: AddLabelsToIssuesInput!
  ): AddLabelsToIssuesPayload

  """Add Projects to a Roadmap"""
  addProjectsToRoadmap(
    """Parameters for AddProjectsToRoadmap"""
    input: AddProjectsToRoadmapInput!
  ): AddProjectsToRoadmapPayload

  """Add repositories to a release"""
  addRepositoriesToRelease(
    """Parameters for AddRepositoriesToRelease"""
    input: AddRepositoriesToReleaseInput!
  ): AddRepositoriesToReleasePayload

  """Add a Repository to a Workspace"""
  addRepositoryToWorkspace(
    """Parameters for AddRepositoryToWorkspace"""
    input: AddRepositoryToWorkspaceInput!
  ): AddRepositoryToWorkspacePayload

  """Add label filters to a Workspace"""
  addWorkspaceLabelFilters(
    """Parameters for AddWorkspaceLabelFilters"""
    input: AddWorkspaceLabelFiltersInput!
  ): AddWorkspaceLabelFiltersPayload

  """Closes multiple issues at once"""
  closeIssues(
    """Parameters for CloseIssues"""
    input: CloseIssuesInput!
  ): CloseIssuesPayload

  """Creates an Epic"""
  createEpic(
    """Parameters for CreateEpic"""
    input: CreateEpicInput!
  ): CreateEpicPayload

  """Convert issue to an epic and add issues to it"""
  createEpicFromIssue(
    """Parameters for CreateEpicFromIssue"""
    input: CreateEpicFromIssueInput!
  ): CreateEpicFromIssuePayload

  """Create an Epic on a Project"""
  createEpicOnProject(
    """Parameters for CreateEpicOnProject"""
    input: CreateEpicOnProjectInput!
  ): CreateEpicOnProjectPayload

  """Create an Epic on a Roadmap"""
  createEpicOnRoadmap(
    """Parameters for CreateEpicOnRoadmap"""
    input: CreateEpicOnRoadmapInput!
  ): CreateEpicOnRoadmapPayload

  """Creates an Issue"""
  createIssue(
    """Parameters for CreateIssue"""
    input: CreateIssueInput!
  ): CreateIssuePayload

  """Creates a Dependency between two issues"""
  createIssueDependency(
    """Parameters for CreateIssueDependency"""
    input: CreateIssueDependencyInput!
  ): CreateIssueDependencyPayload @deprecated(reason: "Use createBlockage instead")

  """Creates Issue<->PR Connection"""
  createIssuePrConnection(
    """Parameters for CreateIssuePrConnection"""
    input: CreateIssuePrConnectionInput!
  ): CreateIssuePrConnectionPayload

  """Create a new Pipeline"""
  createPipeline(
    """Parameters for CreatePipeline"""
    input: CreatePipelineInput!
  ): CreatePipelinePayload

  """Create a new PipelineToPipelineAutomation"""
  createPipelineToPipelineAutomation(
    """Parameters for CreatePipelineToPipelineAutomation"""
    input: CreatePipelineToPipelineAutomationInput!
  ): CreatePipelineToPipelineAutomationPayload

  """Create a Project on a Roadmap"""
  createProjectOnRoadmap(
    """Parameters for CreateProjectOnRoadmap"""
    input: CreateProjectOnRoadmapInput!
  ): CreateProjectOnRoadmapPayload

  """Create a release"""
  createRelease(
    """Parameters for CreateRelease"""
    input: CreateReleaseInput!
  ): CreateReleasePayload

  """Creates a SprintConfig for a workspace"""
  createSprintConfig(
    """Parameters for CreateSprintConfig"""
    input: CreateSprintConfigInput!
  ): CreateSprintConfigPayload

  """Create a Workspace"""
  createWorkspace(
    """Parameters for CreateWorkspace"""
    input: CreateWorkspaceInput!
  ): CreateWorkspacePayload

  """Create a Zenhub Organization"""
  createZenhubOrganization(
    """Parameters for CreateZenhubOrganization"""
    input: CreateZenhubOrganizationInput!
  ): CreateZenhubOrganizationPayload

  """Create ZenhubOrganization invite"""
  createZenhubOrganizationInvite(
    """Parameters for CreateZenhubOrganizationInvite"""
    input: CreateZenhubOrganizationInviteInput!
  ): CreateZenhubOrganizationInvitePayload

  """Destroy epic and its dependents"""
  deleteEpicByIssueInfo(
    """Parameters for DeleteEpicByIssueInfo"""
    input: DeleteEpicByIssueInfoInput!
  ): DeleteEpicByIssueInfoPayload

  """Delete a Dependency between two issues"""
  deleteIssueDependency(
    """Parameters for DeleteIssueDependency"""
    input: DeleteIssueDependencyInput!
  ): DeleteIssueDependencyPayload @deprecated(reason: "Use deleteBlockage instead")

  """Deletes Issue<->PR Connection"""
  deleteIssuePrConnection(
    """Parameters for DeleteIssuePrConnection"""
    input: DeleteIssuePrConnectionInput!
  ): DeleteIssuePrConnectionPayload

  """Delete a Pipeline"""
  deletePipeline(
    """Parameters for DeletePipeline"""
    input: DeletePipelineInput!
  ): DeletePipelinePayload

  """Delete a PipelineToPipelineAutomation"""
  deletePipelineToPipelineAutomation(
    """Parameters for DeletePipelineToPipelineAutomation"""
    input: DeletePipelineToPipelineAutomationInput!
  ): DeletePipelineToPipelineAutomationPayload

  """Delete a Project"""
  deleteProject(
    """Parameters for DeleteProject"""
    input: DeleteProjectInput!
  ): DeleteProjectPayload

  """Delete a SprintConfig and open Sprints for a workspace"""
  deleteSprintConfigAndOpenSprints(
    """Parameters for DeleteSprintConfigAndOpenSprints"""
    input: DeleteSprintConfigAndOpenSprintsInput!
  ): DeleteSprintConfigAndOpenSprintsPayload

  """Deletes a Workspace"""
  deleteWorkspace(
    """Parameters for DeleteWorkspace"""
    input: DeleteWorkspaceInput!
  ): DeleteWorkspacePayload

  """Deletes a workspace favorite"""
  deleteWorkspaceFavorite(
    """Parameters for DeleteWorkspaceFavorite"""
    input: DeleteWorkspaceFavoriteInput!
  ): DeleteWorkspaceFavoritePayload

  """Delete Zenhub user"""
  deleteZenhubUser(
    """Parameters for DeleteZenhubUser"""
    input: DeleteZenhubUserInput!
  ): DeleteZenhubUserPayload

  """Disconnects a repository from a Workspace"""
  disconnectWorkspaceRepository(
    """Parameters for DisconnectWorkspaceRepository"""
    input: DisconnectWorkspaceRepositoryInput!
  ): DisconnectWorkspaceRepositoryPayload

  """Leave zenhub organization"""
  leaveZenhubOrganization(
    """Parameters for LeaveZenhubOrganization"""
    input: LeaveZenhubOrganizationInput!
  ): LeaveZenhubOrganizationPayload

  """
  Move all pipeline issues from source pipelines to a destination pipeline
  """
  moveAllPipelineIssues(
    """Parameters for MoveAllPipelineIssues"""
    input: MoveAllPipelineIssuesInput!
  ): MoveAllPipelineIssuesPayload

  """Move issues to a position in a pipeline"""
  moveIssue(
    """Parameters for MoveIssue"""
    input: MoveIssueInput!
  ): MoveIssuePayload

  """Move Issue after/before a PipelineIssue or to start/end"""
  moveIssueRelativeTo(
    """Parameters for MoveIssueRelativeTo"""
    input: MoveIssueRelativeToInput!
  ): MoveIssueRelativeToPayload

  """Move PipelineIssues to either top or bottom"""
  movePipelineIssues(
    """Parameters for MovePipelineIssues"""
    input: MovePipelineIssuesInput!
  ): MovePipelineIssuesPayload

  """Move roadmap items relative to each other"""
  moveRoadmapItemRelativeTo(
    """Parameters for MoveRoadmapItemRelativeTo"""
    input: MoveRoadmapItemRelativeToInput!
  ): MoveRoadmapItemRelativeToPayload

  """Remove assignees from multiple Issues"""
  removeAssigneesFromIssues(
    """Parameters for RemoveAssigneesFromIssues"""
    input: RemoveAssigneesFromIssuesInput!
  ): RemoveAssigneesFromIssuesPayload

  """Removes an Epic from a Project"""
  removeEpicFromProject(
    """Parameters for RemoveEpicFromProject"""
    input: RemoveEpicFromProjectInput!
  ): RemoveEpicFromProjectPayload

  """Removes an Epic from a Roadmap"""
  removeEpicFromRoadmap(
    """Parameters for RemoveEpicFromRoadmap"""
    input: RemoveEpicFromRoadmapInput!
  ): RemoveEpicFromRoadmapPayload

  """Remove a value from an EstimateSet"""
  removeEstimateSetValue(
    """Parameters for RemoveEstimateSetValue"""
    input: RemoveEstimateSetValueInput!
  ): RemoveEstimateSetValuePayload

  """Removes multiple issue priorities"""
  removeIssueInfoPriorities(
    """Parameters for RemoveIssueInfoPriorities"""
    input: RemoveIssueInfoPrioritiesInput!
  ): RemoveIssueInfoPrioritiesPayload

  """Remove Issues from Epics"""
  removeIssuesFromEpics(
    """Parameters for RemoveIssuesFromEpics"""
    input: RemoveIssuesFromEpicsInput!
  ): RemoveIssuesFromEpicsPayload

  """Remove Issues from Releases"""
  removeIssuesFromReleases(
    """Parameters for RemoveIssuesFromReleases"""
    input: RemoveIssuesFromReleasesInput!
  ): RemoveIssuesFromReleasesPayload

  """Remove Issues from Sprints"""
  removeIssuesFromSprints(
    """Parameters for RemoveIssuesFromSprints"""
    input: RemoveIssuesFromSprintsInput!
  ): RemoveIssuesFromSprintsPayload

  """Remove labels from multiple Issues"""
  removeLabelsFromIssues(
    """Parameters for RemoveLabelsFromIssues"""
    input: RemoveLabelsFromIssuesInput!
  ): RemoveLabelsFromIssuesPayload

  """Remove a Project from a Roadmap"""
  removeProjectFromRoadmap(
    """Parameters for RemoveProjectFromRoadmap"""
    input: RemoveProjectFromRoadmapInput!
  ): RemoveProjectFromRoadmapPayload

  """Remove repositories from a release"""
  removeRepositoriesFromRelease(
    """Parameters for RemoveRepositoriesFromRelease"""
    input: RemoveRepositoriesFromReleaseInput!
  ): RemoveRepositoriesFromReleasePayload

  """Remove user from zenhub organization"""
  removeUserFromZenhubOrganization(
    """Parameters for RemoveUserFromZenhubOrganization"""
    input: RemoveUserFromZenhubOrganizationInput!
  ): RemoveUserFromZenhubOrganizationPayload

  """Removes label filters from a Workspace"""
  removeWorkspaceLabelFilters(
    """Parameters for RemoveWorkspaceLabelFilters"""
    input: RemoveWorkspaceLabelFiltersInput!
  ): RemoveWorkspaceLabelFiltersPayload

  """Reopen Issues into a Pipeline either at the start or end"""
  reopenIssues(
    """Parameters for ReopenIssues"""
    input: ReopenIssuesInput!
  ): ReopenIssuesPayload

  """Set an estimate on an Issue"""
  setEstimate(
    """Parameters for SetEstimate"""
    input: SetEstimateInput!
  ): SetEstimatePayload

  """Sets a workspace as favorite"""
  setFavoriteWorkspace(
    """Parameters for SetFavoriteWorkspace"""
    input: SetFavoriteWorkspaceInput!
  ): SetFavoriteWorkspacePayload

  """Sets multiple issue priorities"""
  setIssueInfoPriorities(
    """Parameters for SetIssueInfoPriorities"""
    input: SetIssueInfoPrioritiesInput!
  ): SetIssueInfoPrioritiesPayload

  """Set estimates on multiple Issues"""
  setMultipleEstimates(
    """Parameters for SetMultipleEstimates"""
    input: SetMultipleEstimatesInput!
  ): SetMultipleEstimatesPayload

  """Set stages for pipelines"""
  setPipelineStages(
    """Parameters for SetPipelineStages"""
    input: SetPipelineStagesInput!
  ): SetPipelineStagesPayload

  """Set priority on PipelineIssues"""
  setPriorityOnPipelineIssues(
    """Parameters for SetPriorityOnPipelineIssues"""
    input: SetPriorityOnPipelineIssuesInput!
  ): SetPriorityOnPipelineIssuesPayload

  """Sets a pull_request_pipeline_id for a workspace"""
  setPullRequestPipeline(
    """Parameters for SetPullRequestPipeline"""
    input: SetPullRequestPipelineInput!
  ): SetPullRequestPipelinePayload

  """For a user, set Workspace's last viewed timestamp to now"""
  setWorkspaceViewedNow(
    """Parameters for SetWorkspaceViewedNow"""
    input: SetWorkspaceViewedNowInput!
  ): SetWorkspaceViewedNowPayload

  """Splits a repository from a Workspace"""
  splitWorkspaceRepository(
    """Parameters for SplitWorkspaceRepository"""
    input: SplitWorkspaceRepositoryInput!
  ): SplitWorkspaceRepositoryPayload

  """Update epic's startOn and endOn dates"""
  updateEpicDates(
    """Parameters for UpdateEpicDates"""
    input: UpdateEpicDatesInput!
  ): UpdateEpicDatesPayload

  """Adds and Removes Issues from an Epic"""
  updateEpicIssuesByIssueInfos(
    """Parameters for UpdateEpicIssuesByIssueInfos"""
    input: UpdateEpicIssuesByIssueInfosInput!
  ): UpdateEpicIssuesByIssueInfosPayload

  """Update an existing Issue"""
  updateIssue(
    """Parameters for UpdateIssue"""
    input: UpdateIssueInput!
  ): UpdateIssuePayload

  """Update a Pipeline"""
  updatePipeline(
    """Parameters for UpdatePipeline"""
    input: UpdatePipelineInput!
  ): UpdatePipelinePayload

  """Update a Project"""
  updateProject(
    """Parameters for UpdateProject"""
    input: UpdateProjectInput!
  ): UpdateProjectPayload

  """Update Project's startOn and endOn dates"""
  updateProjectDates(
    """Parameters for UpdateProjectDates"""
    input: UpdateProjectDatesInput!
  ): UpdateProjectDatesPayload

  """Update a Project State"""
  updateProjectState(
    """Parameters for UpdateProjectState"""
    input: UpdateProjectStateInput!
  ): UpdateProjectStatePayload

  """Update a release"""
  updateRelease(
    """Parameters for UpdateRelease"""
    input: UpdateReleaseInput!
  ): UpdateReleasePayload

  """Update an existing Sprint"""
  updateSprint(
    """Parameters for UpdateSprint"""
    input: UpdateSprintInput!
  ): UpdateSprintPayload

  """Updates a SprintConfig for a workspace"""
  updateSprintConfig(
    """Parameters for UpdateSprintConfig"""
    input: UpdateSprintConfigInput!
  ): UpdateSprintConfigPayload

  """Update user permissions on organization"""
  updateUserPermissions(
    """Parameters for UpdateUserPermissions"""
    input: UpdateUserPermissionsInput!
  ): UpdateUserPermissionsPayload

  """Update a Workspace"""
  updateWorkspace(
    """Parameters for UpdateWorkspace"""
    input: UpdateWorkspaceInput!
  ): UpdateWorkspacePayload

  """Update ZenhubOrganization"""
  updateZenhubOrganization(
    """Parameters for UpdateZenhubOrganization"""
    input: UpdateZenhubOrganizationInput!
  ): UpdateZenhubOrganizationPayload
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

enum OrderDirection {
  ASC
  DESC
}

type Organization implements Owner & Timestamps {
  avatarUrl: String!
  createdAt: ISO8601DateTime!
  ghId: Int
  hasWorkspace: Boolean!
  id: ID!
  login: String!
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectConnection!
  repositoryFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryFavoriteConnection!
  roadmapItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RoadmapItemConnection!
  searchWorkspaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    query: String!
    repositoryGhIds: [Int!]
  ): WorkspaceSearchMatchConnection!
  type: String!
  updatedAt: ISO8601DateTime!
  workspaceFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkspaceFavoriteConnection!
  zenhubOrganization: ZenhubOrganization
}

interface Owner {
  avatarUrl: String!
  createdAt: ISO8601DateTime!
  ghId: Int
  hasWorkspace: Boolean!
  id: ID!
  login: String!
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectConnection!
  repositoryFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryFavoriteConnection!
  roadmapItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RoadmapItemConnection!
  searchWorkspaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    query: String!
    repositoryGhIds: [Int!]
  ): WorkspaceSearchMatchConnection!
  type: String!
  updatedAt: ISO8601DateTime!
  workspaceFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkspaceFavoriteConnection!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

enum PermissionLevel {
  NONE
  READ
  WRITE
  ADMIN
}

type Pipeline implements Timestamps & Node {
  createdAt: ISO8601DateTime!
  description: String
  hasEstimatedIssues: Boolean!
  id: ID!
  isDefaultPRPipeline: Boolean!
  isEpicPipeline: Boolean!
  issues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    repositoryGhId: Int
    state: IssueState
  ): IssueConnection!
  itemBefore: Pipeline
  name: String!
  pipelineToPipelineAutomationDestinations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PipelineToPipelineAutomationConnection!
  pipelineToPipelineAutomationSources(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PipelineToPipelineAutomationConnection!
  stage: PipelineStage
  updatedAt: ISO8601DateTime!
  workspace: Workspace!
}

"""The connection type for Pipeline."""
type PipelineConnection {
  """A list of edges."""
  edges: [PipelineEdge!]!

  """A list of nodes."""
  nodes: [Pipeline!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

type PipelineCounts {
  issuesCount: Int!
  pullRequestsCount: Int!
  sumEstimates: Float!
}

"""An edge in a connection."""
type PipelineEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Pipeline!
}

type PipelineIssue {
  id: ID!
  issue: Issue!
  itemAfter: PipelineIssue
  itemBefore: PipelineIssue
  latestTransferTime: ISO8601DateTime
  pipeline: Pipeline!
  priority: Priority
  relativePosition: BigInt!
  workspace: Workspace!
}

"""The connection type for PipelineIssue."""
type PipelineIssueConnection {
  """A list of edges."""
  edges: [PipelineIssueEdge!]!

  """A list of nodes."""
  nodes: [PipelineIssue!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type PipelineIssueEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PipelineIssue!
}

type PipelineIssueMove {
  movedAt: Float!
  pipelineIssue: PipelineIssue!
  sourcePipelineId: ID
}

enum PipelineIssuePosition {
  START
  END
}

enum PipelineStage {
  DEVELOPMENT
  REVIEW
  COMPLETED
}

type PipelineToPipelineAutomation implements Node & Timestamps {
  createdAt: ISO8601DateTime!
  destinationPipeline: Pipeline!
  id: ID!
  sourcePipeline: Pipeline!
  updatedAt: ISO8601DateTime!
}

"""The connection type for PipelineToPipelineAutomation."""
type PipelineToPipelineAutomationConnection {
  """A list of edges."""
  edges: [PipelineToPipelineAutomationEdge!]!

  """A list of nodes."""
  nodes: [PipelineToPipelineAutomation!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type PipelineToPipelineAutomationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PipelineToPipelineAutomation!
}

type Priority implements Timestamps {
  color: String!
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime!
}

"""The connection type for Priority."""
type PriorityConnection {
  """A list of edges."""
  edges: [PriorityEdge!]!

  """A list of nodes."""
  nodes: [Priority!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type PriorityEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Priority!
}

type Project implements Node & Timestamps & ViewerPermission & IssueProgress {
  closedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  creator: ZenhubUser
  description: String
  endOn: ISO8601Date
  epics(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): EpicConnection!
  id: ID!
  issueCountProgress: IssueCountProgress
  issueEstimateProgress: IssueEstimateProgress
  name: String!
  startOn: ISO8601Date
  state: ProjectState!
  updatedAt: ISO8601DateTime!
  viewerAbilities: ProjectAbilities!
  viewerPermission: PermissionLevel!
}

type ProjectAbilities {
  closeAllEpics: Boolean!
  scaleDates: Boolean!
  shiftDates: Boolean!
}

"""The connection type for Project."""
type ProjectConnection {
  """A list of edges."""
  edges: [ProjectEdge!]!

  """A list of nodes."""
  nodes: [Project!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

enum ProjectDateAction {
  SHIFT
  SCALE
  RESET
}

"""An edge in a connection."""
type ProjectEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Project!
}

input ProjectInput {
  name: String!
  description: String
}

enum ProjectState {
  OPEN
  CLOSED
}

type PullRequest implements GithubTimestamps & Timestamps {
  createdAt: ISO8601DateTime!
  draft: Boolean!
  ghCreatedAt: ISO8601DateTime!
  ghUpdatedAt: ISO8601DateTime!
  id: ID!
  issue: Issue!
  state: PullRequestState!
  updatedAt: ISO8601DateTime!
}

type PullRequestReview implements GithubTimestamps & Timestamps {
  createdAt: ISO8601DateTime!
  ghCreatedAt: ISO8601DateTime!
  ghId: Int!
  ghNodeId: ID!
  ghUpdatedAt: ISO8601DateTime!
  id: ID!
  state: PullRequestReviewState!
  submittedAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
  user: Owner
}

"""The connection type for PullRequestReview."""
type PullRequestReviewConnection {
  """A list of edges."""
  edges: [PullRequestReviewEdge!]!

  """A list of nodes."""
  nodes: [PullRequestReview!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type PullRequestReviewEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PullRequestReview!
}

enum PullRequestReviewState {
  APPROVED
  CHANGES_REQUESTED
  COMMENTED
  DISMISSED
}

enum PullRequestState {
  CLOSED
  MERGED
  OPEN
}

type Query {
  """Lookup an Issue by repository_gh_id and issue_number"""
  issueByInfo(repositoryGhId: Int!, issueNumber: Int!): Issue!

  """
  A concatenated list of all issues connected to any
             of the given issues in the passed workspace
  """
  issueConnections(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    workspaceId: ID!
    issueIds: [ID!]!
  ): IssueConnection!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!

  """Lookup an Owner by GitHub database ID"""
  ownerByGhId(ghId: Int!): Owner

  """Lookup an Owner by GitHub login"""
  ownerByLogin(login: String!): Owner

  """preview sprint config schedules"""
  previewSprintConfig(startOn: ISO8601Date!, endOn: ISO8601Date!, tzIdentifier: String!): SprintConfigPreview

  """User's recently viewed Workspaces"""
  recentlyViewedWorkspaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    repositoryGhIds: [ID!]
  ): WorkspaceConnection!

  """Lookup repositories by their GitHub ID"""
  repositoriesByGhId(ghIds: [Int!]!): [Repository!]!

  """Search and filter closed issues per pipeline"""
  searchClosedIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    workspaceId: ID!
    query: String
    filters: IssueSearchFiltersInput!
  ): IssueConnection

  """Search and filter issues inside repository"""
  searchIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    workspaceId: ID!
    filters: EpicAssignableIssueSearchFiltersInput!
    query: String
    epicIssueByInfo: IssueInfoInput
    includeClosed: Boolean
  ): IssueConnection

  """Search and filter issues per pipeline"""
  searchIssuesByPipeline(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    pipelineId: ID!
    query: String
    order: IssueOrderInput
    filters: IssueSearchFiltersInput!
  ): IssueConnection

  """
  PipelineToPipelineAutomation records that are triggered when an issue moves into a Pipeline
  """
  triggeredPipelineToPipelineAutomations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    issue: IssueInfoInput!
    pipelineId: ID!
  ): PipelineToPipelineAutomationConnection!

  """Validate a workspace name within a zorg"""
  validateWorkspaceName(zenhubOrganizationId: ID!, name: String!): Boolean!

  """Return the current zenhub user"""
  viewer: ZenhubUser!

  """Lookup Workspace by its ID"""
  workspace(id: ID!): Workspace
}

type Release implements Node & ViewerPermission & Timestamps {
  closedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  description: String
  endOn: ISO8601Date
  id: ID!
  issues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): IssueConnection!
  repositories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryConnection!
  startOn: ISO8601Date
  state: ReleaseState!
  title: String!
  updatedAt: ISO8601DateTime!
  viewerPermission: PermissionLevel!
}

"""The connection type for Release."""
type ReleaseConnection {
  """A list of edges."""
  edges: [ReleaseEdge!]!

  """A list of nodes."""
  nodes: [Release!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

input ReleaseCreateInput {
  title: String!
  description: String
  startOn: ISO8601Date!
  endOn: ISO8601Date!
  repositoryGhIds: [Int!]!
}

"""An edge in a connection."""
type ReleaseEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Release!
}

enum ReleaseState {
  OPEN
  CLOSED
}

"""Filter by ReleaseState"""
input ReleaseStateInput {
  eq: ReleaseState!
}

input ReleaseUpdateInput {
  title: String
  description: String
  state: ReleaseState
  startOn: ISO8601Date
  endOn: ISO8601Date
}

"""Autogenerated input type of RemoveAssigneesFromIssues"""
input RemoveAssigneesFromIssuesInput {
  issueIds: [ID!]!
  assigneeIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveAssigneesFromIssues"""
type RemoveAssigneesFromIssuesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  successCount: Int!
}

"""Autogenerated input type of RemoveEpicFromProject"""
input RemoveEpicFromProjectInput {
  projectId: ID!
  epicId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveEpicFromProject"""
type RemoveEpicFromProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
  project: Project!
}

"""Autogenerated input type of RemoveEpicFromRoadmap"""
input RemoveEpicFromRoadmapInput {
  roadmapId: ID!
  epicId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveEpicFromRoadmap"""
type RemoveEpicFromRoadmapPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
  roadmap: Roadmap!
}

"""Autogenerated input type of RemoveEstimateSetValue"""
input RemoveEstimateSetValueInput {
  repositoryGhId: Int!
  value: Float!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveEstimateSetValue"""
type RemoveEstimateSetValuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  estimateSet: EstimateSet!
}

"""Autogenerated input type of RemoveIssueInfoPriorities"""
input RemoveIssueInfoPrioritiesInput {
  workspaceId: ID!
  issues: [IssueInfoInput!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveIssueInfoPriorities"""
type RemoveIssueInfoPrioritiesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipelineIssues: [PipelineIssue!]!
}

"""Autogenerated input type of RemoveIssuesFromEpics"""
input RemoveIssuesFromEpicsInput {
  issueIds: [ID!]!
  epicIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveIssuesFromEpics"""
type RemoveIssuesFromEpicsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epics: [Epic!]!
}

"""Autogenerated input type of RemoveIssuesFromReleases"""
input RemoveIssuesFromReleasesInput {
  issueIds: [ID!]!
  releaseIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveIssuesFromReleases"""
type RemoveIssuesFromReleasesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  releases: [Release!]!
}

"""Autogenerated input type of RemoveIssuesFromSprints"""
input RemoveIssuesFromSprintsInput {
  issueIds: [ID!]!
  sprintIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveIssuesFromSprints"""
type RemoveIssuesFromSprintsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  sprints: [Sprint!]!
}

"""Autogenerated input type of RemoveLabelsFromIssues"""
input RemoveLabelsFromIssuesInput {
  issueIds: [ID!]!
  labelIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveLabelsFromIssues"""
type RemoveLabelsFromIssuesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  successCount: Int!
}

"""Autogenerated input type of RemoveProjectFromRoadmap"""
input RemoveProjectFromRoadmapInput {
  roadmapId: ID!
  projectId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveProjectFromRoadmap"""
type RemoveProjectFromRoadmapPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  project: Project!
  projectDeleted: Boolean!
  roadmap: Roadmap!
}

"""Autogenerated input type of RemoveRepositoriesFromRelease"""
input RemoveRepositoriesFromReleaseInput {
  repositoryGhIds: [Int!]!
  releaseId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveRepositoriesFromRelease"""
type RemoveRepositoriesFromReleasePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  release: Release!
}

"""Autogenerated input type of RemoveUserFromZenhubOrganization"""
input RemoveUserFromZenhubOrganizationInput {
  zenhubOrganizationId: ID!
  zenhubUserId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveUserFromZenhubOrganization"""
type RemoveUserFromZenhubOrganizationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  zenhubOrganization: ZenhubOrganization!
}

"""Autogenerated input type of RemoveWorkspaceLabelFilters"""
input RemoveWorkspaceLabelFiltersInput {
  workspaceLabelFiltersIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveWorkspaceLabelFilters"""
type RemoveWorkspaceLabelFiltersPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """deleted workspace label filters"""
  workspaceLabelFilters: [WorkspaceLabelFilter!]!
}

"""Autogenerated input type of ReopenIssues"""
input ReopenIssuesInput {
  issueIds: [ID!]!
  pipelineId: ID!
  position: PipelineIssuePosition!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ReopenIssues"""
type ReopenIssuesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  successCount: Int!
}

type Repository implements Node & Timestamps & GithubTimestamps {
  assignableUsers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    query: String
  ): UserConnection!
  createdAt: ISO8601DateTime!
  description: String
  estimateSet: EstimateSet!
  ghCreatedAt: ISO8601DateTime!
  ghId: Int!
  ghNodeId: ID
  ghUpdatedAt: ISO8601DateTime!
  id: ID!
  import: RepositoryImport!
  isFavorite: Boolean!
  isPrivate: Boolean!
  issueTemplates(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): IssueTemplateConnection!
  issues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): IssueConnection!
  labels(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): LabelConnection!
  name: String!
  owner: Owner!
  ownerName: String!
  permissions: RepositoryPermission!
  releases(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ReleaseConnection!
  updatedAt: ISO8601DateTime!
  workspaces: [Workspace!]! @deprecated(reason: "Use `Repository.workspaces_connection`.")
  workspacesConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkspaceConnection!
}

"""The connection type for Repository."""
type RepositoryConnection {
  """A list of edges."""
  edges: [RepositoryEdge!]!

  """A list of nodes."""
  nodes: [Repository!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type RepositoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Repository!
}

type RepositoryFavorite implements Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  repository: Repository!
  updatedAt: ISO8601DateTime!
}

"""The connection type for RepositoryFavorite."""
type RepositoryFavoriteConnection {
  """A list of edges."""
  edges: [RepositoryFavoriteEdge!]!

  """A list of nodes."""
  nodes: [RepositoryFavorite!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type RepositoryFavoriteEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: RepositoryFavorite!
}

type RepositoryImport implements Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  resources(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryImportResourceConnection!
  state: RepositoryImportState!
  updatedAt: ISO8601DateTime!
}

type RepositoryImportResource implements Timestamps {
  completedAt: ISO8601DateTime
  completedPages: Int
  createdAt: ISO8601DateTime!
  id: ID!
  kind: RepositoryImportResourceKind!
  startedAt: ISO8601DateTime
  state: RepositoryImportResourceState!
  totalPages: Int
  updatedAt: ISO8601DateTime!
}

"""The connection type for RepositoryImportResource."""
type RepositoryImportResourceConnection {
  """A list of edges."""
  edges: [RepositoryImportResourceEdge!]!

  """A list of nodes."""
  nodes: [RepositoryImportResource!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type RepositoryImportResourceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: RepositoryImportResource!
}

enum RepositoryImportResourceKind {
  OPEN_ISSUES
  CLOSED_ISSUES
}

enum RepositoryImportResourceState {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum RepositoryImportState {
  PENDING
  IN_PROGRESS
  USABLE
  COMPLETED
}

type RepositoryMatch {
  matchedRepositories: [Repository!]!
  workspace: Workspace!
}

type RepositoryPermission {
  admin: Boolean!
  pull: Boolean!
  push: Boolean!
}

union Reviewer = User

type ReviewRequest implements Timestamps {
  createdAt: ISO8601DateTime!
  ghId: Int!
  ghNodeId: ID!
  id: ID!
  reviewer: Reviewer
  updatedAt: ISO8601DateTime!
}

"""The connection type for ReviewRequest."""
type ReviewRequestConnection {
  """A list of edges."""
  edges: [ReviewRequestEdge!]!

  """A list of nodes."""
  nodes: [ReviewRequest!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type ReviewRequestEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ReviewRequest!
}

type Roadmap implements Node & Timestamps & ViewerPermission {
  createdAt: ISO8601DateTime!
  id: ID!
  items(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: RoadmapItemOrderInput
  ): RoadmapItemConnection!
  updatedAt: ISO8601DateTime!
  viewerPermission: PermissionLevel!
  workspace: Workspace!
}

union RoadmapItem = Epic | Project

"""The connection type for RoadmapItem."""
type RoadmapItemConnection {
  """A list of edges."""
  edges: [RoadmapItemEdge!]!

  """A list of nodes."""
  nodes: [RoadmapItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type RoadmapItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: RoadmapItem
}

enum RoadmapItemOrderField {
  """Order by item start_on"""
  start_on

  """Order by item end_on"""
  end_on
}

"""Sort roadmap items"""
input RoadmapItemOrderInput {
  field: RoadmapItemOrderField!
  direction: OrderDirection!
}

enum Roles {
  MEMBER
  ADMIN
}

type ScopeChange {
  action: BucketIssueHistoryAction!
  effectiveAt: ISO8601DateTime!
  estimateValue: Float
  issue: Issue!
}

"""The connection type for ScopeChange."""
type ScopeChangeConnection {
  """A list of edges."""
  edges: [ScopeChangeEdge!]!

  """A list of nodes."""
  nodes: [ScopeChange!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type ScopeChangeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ScopeChange!
}

"""Autogenerated input type of SetEstimate"""
input SetEstimateInput {
  value: Float
  issueId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SetEstimate"""
type SetEstimatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of SetFavoriteWorkspace"""
input SetFavoriteWorkspaceInput {
  workspaceId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SetFavoriteWorkspace"""
type SetFavoriteWorkspacePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspaceFavorite: WorkspaceFavorite!
}

"""Autogenerated input type of SetIssueInfoPriorities"""
input SetIssueInfoPrioritiesInput {
  priorityId: ID!
  issues: [IssueInfoInput!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SetIssueInfoPriorities"""
type SetIssueInfoPrioritiesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipelineIssues: [PipelineIssue!]!
}

"""Autogenerated input type of SetMultipleEstimates"""
input SetMultipleEstimatesInput {
  issueIds: [ID!]!
  value: Float

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SetMultipleEstimates"""
type SetMultipleEstimatesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issues: [Issue!]!
}

"""Autogenerated input type of SetPipelineStages"""
input SetPipelineStagesInput {
  inDevelopmentPipelineIds: [ID!]
  inReviewPipelineIds: [ID!]
  completedPipelineIds: [ID!]
  workspaceId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SetPipelineStages"""
type SetPipelineStagesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipelines: [Pipeline!]!
}

"""Autogenerated input type of SetPriorityOnPipelineIssues"""
input SetPriorityOnPipelineIssuesInput {
  priorityId: ID
  pipelineIssueIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SetPriorityOnPipelineIssues"""
type SetPriorityOnPipelineIssuesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipelineIssues: [PipelineIssue!]!
}

"""Autogenerated input type of SetPullRequestPipeline"""
input SetPullRequestPipelineInput {
  workspaceId: ID!
  pipelineId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SetPullRequestPipeline"""
type SetPullRequestPipelinePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!
}

"""Autogenerated input type of SetWorkspaceViewedNow"""
input SetWorkspaceViewedNowInput {
  workspaceId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SetWorkspaceViewedNow"""
type SetWorkspaceViewedNowPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!
}

"""Autogenerated input type of SplitWorkspaceRepository"""
input SplitWorkspaceRepositoryInput {
  workspaceId: ID!
  repositoryGhId: Int!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SplitWorkspaceRepository"""
type SplitWorkspaceRepositoryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  splitWorkspace: Workspace!
  workspace: Workspace!
}

type Sprint implements Node & Timestamps {
  closedIssuesCount: Int!
  completedPoints: Float!
  createdAt: ISO8601DateTime!
  endAt: ISO8601DateTime!
  id: ID!
  issues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): IssueConnection!
  name: String

  """batching is disabled for this field"""
  scopeChange(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ScopeChangeConnection!
  sprintIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    labelIds: [ID!]
  ): SprintIssueConnection!
  startAt: ISO8601DateTime!
  state: SprintState!
  totalPoints: Float!
  updatedAt: ISO8601DateTime!
  workspace: Workspace!
}

type SprintConfig implements Node & Timestamps {
  createdAt: ISO8601DateTime!
  endDay: SprintConfigDayOfTheWeek!
  id: ID!
  name: String!
  period: Int!
  settings: SprintConfigSettings!
  startDay: SprintConfigDayOfTheWeek!
  tzIdentifier: String!
  updatedAt: ISO8601DateTime!
  workspace: Workspace!
}

input SprintConfigCreateInput {
  workspaceId: ID!
  name: String!
  tzIdentifier: String!
  startOn: ISO8601Date!
  endOn: ISO8601Date!
  settings: SprintConfigSettingsInput!
}

enum SprintConfigDayOfTheWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

input SprintConfigIssuesFromPipelineInput {
  pipelineId: ID
  totalStoryPoints: Float
  enabled: Boolean!
}

type SprintConfigPreview {
  periodInWeeks: Int!
  sprints: [Sprint!]!
}

type SprintConfigSettings {
  issuesFromPipeline: SprintConfigSettingsIssuesFromPipeline!
  moveUnfinishedIssues: Boolean!
}

input SprintConfigSettingsInput {
  moveUnfinishedIssues: Boolean!
  issuesFromPipeline: SprintConfigIssuesFromPipelineInput!
}

type SprintConfigSettingsIssuesFromPipeline {
  enabled: Boolean!
  pipelineId: ID
  totalStoryPoints: Float
}

input SprintConfigUpdateInput {
  workspaceId: ID!
  name: String!
  settings: SprintConfigSettingsInput!
  tzIdentifier: String
  startOn: ISO8601Date
  endOn: ISO8601Date
}

"""The connection type for Sprint."""
type SprintConnection {
  """A list of edges."""
  edges: [SprintEdge!]!

  """A list of nodes."""
  nodes: [Sprint!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type SprintEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Sprint!
}

input SprintFiltersInput {
  state: SprintStateInput
  id: SprintIdInput
}

"""Filter sprint ID column"""
input SprintIdInput {
  notInAny: Boolean = false
  in: [ID!]
  nin: [ID!]
}

type SprintIssue implements Node & Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  issue: Issue!
  sprint: Sprint!
  updatedAt: ISO8601DateTime!
}

"""The connection type for SprintIssue."""
type SprintIssueConnection {
  """A list of edges."""
  edges: [SprintIssueEdge!]!

  """A list of nodes."""
  nodes: [SprintIssue!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type SprintIssueEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: SprintIssue!
}

enum SprintOrderField {
  END_AT
  START_AT
}

"""Order of Sprint connection"""
input SprintOrderInput {
  direction: OrderDirection
  field: SprintOrderField
}

enum SprintState {
  OPEN
  CLOSED
}

"""Filter by SprintState"""
input SprintStateInput {
  eq: SprintState!
}

"""Filter a String column"""
input StringInput {
  notInAny: Boolean = false
  in: [String!]
  nin: [String!]
}

type TimelineItem implements Timestamps {
  createdAt: ISO8601DateTime!
  data: JSON
  id: ID!
  key: String!
  updatedAt: ISO8601DateTime!
}

"""The connection type for TimelineItem."""
type TimelineItemConnection {
  """A list of edges."""
  edges: [TimelineItemEdge!]!

  """A list of nodes."""
  nodes: [TimelineItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type TimelineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: TimelineItem!
}

interface Timestamps {
  createdAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
}

type Unassignable {
  assignee: User!
  issues: [Issue!]!
}

"""Autogenerated input type of UpdateEpicDates"""
input UpdateEpicDatesInput {
  epicId: ID!
  roadmapId: ID
  startOn: ISO8601Date
  endOn: ISO8601Date

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateEpicDates"""
type UpdateEpicDatesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
}

"""Autogenerated input type of UpdateEpicIssuesByIssueInfos"""
input UpdateEpicIssuesByIssueInfosInput {
  epic: IssueInfoInput!
  addIssues: [IssueInfoInput!]!
  removeIssues: [IssueInfoInput!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateEpicIssuesByIssueInfos"""
type UpdateEpicIssuesByIssueInfosPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
  issuesAdded: [Issue]!
  issuesRemoved: [Issue]!
}

"""Autogenerated input type of UpdateIssue"""
input UpdateIssueInput {
  body: String
  issueId: ID!
  state: IssueState
  title: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateIssue"""
type UpdateIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: Issue!
}

"""Autogenerated input type of UpdatePipeline"""
input UpdatePipelineInput {
  pipelineId: ID!
  name: String
  position: Int
  description: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdatePipeline"""
type UpdatePipelinePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipeline: Pipeline!
}

"""Autogenerated input type of UpdateProjectDates"""
input UpdateProjectDatesInput {
  projectId: ID!
  startOn: ISO8601Date
  endOn: ISO8601Date
  action: ProjectDateAction!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateProjectDates"""
type UpdateProjectDatesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  project: Project!
}

"""Autogenerated input type of UpdateProject"""
input UpdateProjectInput {
  projectId: ID!
  name: String
  description: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateProject"""
type UpdateProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  project: Project!
}

"""Autogenerated input type of UpdateProjectState"""
input UpdateProjectStateInput {
  projectId: ID!
  state: ProjectState!
  applyToEpics: Boolean = false

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateProjectState"""
type UpdateProjectStatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  project: Project!
}

"""Autogenerated input type of UpdateRelease"""
input UpdateReleaseInput {
  releaseId: ID!
  release: ReleaseUpdateInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateRelease"""
type UpdateReleasePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  release: Release!
}

"""Autogenerated input type of UpdateSprintConfig"""
input UpdateSprintConfigInput {
  sprintConfig: SprintConfigUpdateInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateSprintConfig"""
type UpdateSprintConfigPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  sprintConfig: SprintConfig!
}

"""Autogenerated input type of UpdateSprint"""
input UpdateSprintInput {
  sprintId: ID!
  name: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateSprint"""
type UpdateSprintPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  sprint: Sprint!
}

"""Autogenerated input type of UpdateUserPermissions"""
input UpdateUserPermissionsInput {
  zenhubOrganizationId: ID!
  zenhubUserId: ID!
  role: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateUserPermissions"""
type UpdateUserPermissionsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  role: Roles!
}

"""Autogenerated input type of UpdateWorkspace"""
input UpdateWorkspaceInput {
  workspaceId: ID!
  name: String!
  description: String
  defaultRepositoryGhId: Int

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateWorkspace"""
type UpdateWorkspacePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!
}

"""Autogenerated input type of UpdateZenhubOrganization"""
input UpdateZenhubOrganizationInput {
  zenhubOrganizationId: ID!
  address: String
  defaultPaymentMethod: String
  email: String
  name: String
  nameOnInvoice: String
  taxId: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateZenhubOrganization"""
type UpdateZenhubOrganizationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  zenhubOrganization: ZenhubOrganization!
}

type User implements Owner & Timestamps {
  avatarUrl: String!
  createdAt: ISO8601DateTime!
  ghId: Int
  hasWorkspace: Boolean!
  id: ID!
  login: String!
  name: String
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectConnection!
  repositoryFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryFavoriteConnection!
  roadmapItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RoadmapItemConnection!
  searchWorkspaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    query: String!
    repositoryGhIds: [Int!]
  ): WorkspaceSearchMatchConnection!
  type: String!
  updatedAt: ISO8601DateTime!
  workspaceFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkspaceFavoriteConnection!
  zenhubUser: ZenhubUser
}

"""The connection type for User."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge!]!

  """A list of nodes."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: User!
}

type VelocityDiff {
  difference: Float
  sprintsCount: Int!
  velocity: Float!
}

interface ViewerPermission {
  viewerPermission: PermissionLevel!
}

type Workspace implements Timestamps & ViewerPermission {
  activeSprint: Sprint
  assignees(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    login: StringInput
    repositoryGhIds: [Int!]
    query: String
  ): UserConnection
  authors(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    login: StringInput
    repositoryGhIds: [Int!]
    query: String
  ): UserConnection

  """Average velocity of recently(last 3) closed sprints"""
  averageSprintVelocity: Float

  """Average velocity of recently closed sprints with last sprint influence"""
  averageSprintVelocityWithDiff(skipDiff: Boolean): VelocityDiff

  """Only for querying control chart"""
  closedPipeline: Pipeline!
  createdAt: ISO8601DateTime!
  defaultRepository: Repository
  description: String
  displayName: String!
  epics(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    ids: [ID!]
    repositoryGhIds: [Int!]
    state: IssueStateInput
    query: String
    orderBy: EpicOrderInput
  ): EpicConnection
  hasEstimatedIssues: Boolean!
  id: ID!
  importState: WorkspaceImportState!
  isDeletable: Boolean!
  isEditable: Boolean!
  isFavorite: Boolean!

  """
  Returns the issue dependencies from all the repositories of the workspace.
  Optionally, the result can be filtered by repository.
  """
  issueDependencies(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    repositoryGhIds: [Int!]
  ): IssueDependencyConnection
  issueFlowStats(daysInCycle: Int): IssueFlowStats
  labelFilters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkspaceLabelFilterConnection!
  name: String
  pipelineToPipelineAutomations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PipelineToPipelineAutomationConnection!
  pipelines(includeClosed: Boolean): [Pipeline!]! @deprecated(reason: "Use `Workspace.pipelines_connection`.")
  pipelinesConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PipelineConnection!
  previousSprint: Sprint
  priorities: [Priority!]! @deprecated(reason: "Use `Workspace.priorities_connection`.")
  prioritiesConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PriorityConnection!
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectConnection!
  relatedWorkspaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkspaceConnection!
  releases(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    ids: [ID!]
    query: String
    repositoryGhIds: [Int!]
    state: ReleaseStateInput
  ): ReleaseConnection!
  repositories: [Repository!] @deprecated(reason: "Use `Workspace.repositories_connection`.")
  repositoriesConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryConnection
  roadmap: Roadmap!
  sprintConfig: SprintConfig
  sprints(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    query: String
    filters: SprintFiltersInput
    orderBy: SprintOrderInput
  ): SprintConnection!
  upcomingSprint: Sprint
  updatedAt: ISO8601DateTime!
  viewerPermission: PermissionLevel!
  zenhubOrganization: ZenhubOrganization
  zenhubOwner: ZenhubIdentity
}

"""The connection type for Workspace."""
type WorkspaceConnection {
  """A list of edges."""
  edges: [WorkspaceEdge!]!

  """A list of nodes."""
  nodes: [Workspace!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type WorkspaceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Workspace!
}

type WorkspaceFavorite implements Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
  workspace: Workspace!
}

"""The connection type for WorkspaceFavorite."""
type WorkspaceFavoriteConnection {
  """A list of edges."""
  edges: [WorkspaceFavoriteEdge!]!

  """A list of nodes."""
  nodes: [WorkspaceFavorite!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type WorkspaceFavoriteEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: WorkspaceFavorite!
}

enum WorkspaceImportState {
  PENDING
  IN_PROGRESS
  USABLE
  COMPLETED
}

type WorkspaceLabelFilter {
  id: ID!
  labelName: String!
  workspace: Workspace!
}

"""The connection type for WorkspaceLabelFilter."""
type WorkspaceLabelFilterConnection {
  """A list of edges."""
  edges: [WorkspaceLabelFilterEdge!]!

  """A list of nodes."""
  nodes: [WorkspaceLabelFilter!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type WorkspaceLabelFilterEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: WorkspaceLabelFilter!
}

type WorkspaceMatch {
  workspace: Workspace!
}

type WorkspaceRepository implements Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  repository: Repository!
  updatedAt: ISO8601DateTime!
  workspace: Workspace!
}

union WorkspaceSearchMatch = RepositoryMatch | WorkspaceMatch

"""The connection type for WorkspaceSearchMatch."""
type WorkspaceSearchMatchConnection {
  """A list of edges."""
  edges: [WorkspaceSearchMatchEdge!]!

  """A list of nodes."""
  nodes: [WorkspaceSearchMatch!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type WorkspaceSearchMatchEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: WorkspaceSearchMatch
}

"""Filter issues by special Zenhub epic filters"""
input ZenhubEpicSearchFiltersInput {
  id: IdInput
}

union ZenhubIdentity = ZenhubOrganization | ZenhubUser

type ZenhubOrganization implements Timestamps & Node {
  createdAt: ISO8601DateTime!
  creator: ZenhubUser
  githubOrganization: Organization
  id: ID!
  name: String
  updatedAt: ISO8601DateTime!
  workspaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkspaceConnection!
  zenhubUsers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    platformOnly: Boolean

    """When provideed, it filters the returned users by the given emails"""
    emails: [String!]
    order: ZenhubUserOrderInput
    query: String
  ): ZenhubUserConnection @deprecated(reason: "Use ZenhubOrganizationType.zenhub_users_at_organization instead")
}

"""The connection type for ZenhubOrganization."""
type ZenhubOrganizationConnection {
  """A list of edges."""
  edges: [ZenhubOrganizationEdge!]!

  """A list of nodes."""
  nodes: [ZenhubOrganization!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type ZenhubOrganizationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ZenhubOrganization!
}

type ZenhubUser implements Node & Timestamps {
  createdAt: ISO8601DateTime!
  email: String
  estimationGroups(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    workspaceId: ID!
  ): EstimationGroupConnection!
  githubUser: User
  id: ID!
  imageUrl: String
  name: String
  role(zenhubOrganizationId: ID!): Roles
  searchWorkspaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    query: String!
  ): WorkspaceConnection!
  updatedAt: ISO8601DateTime!
  workspaceFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkspaceFavoriteConnection!
  zenhubOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ZenhubOrganizationConnection!
}

"""The connection type for ZenhubUser."""
type ZenhubUserConnection {
  """A list of edges."""
  edges: [ZenhubUserEdge!]!

  """A list of nodes."""
  nodes: [ZenhubUser!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type ZenhubUserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ZenhubUser!
}

enum ZenhubUserOrderField {
  DISPLAY_NAME
}

"""Order of ZenhubUser connection"""
input ZenhubUserOrderInput {
  direction: OrderDirection
  field: ZenhubUserOrderField
}

