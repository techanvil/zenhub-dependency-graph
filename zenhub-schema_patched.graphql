# Patched version of the ZenHub schema to support `epicIssueByInfo` field which seems to have been removed from the online schema.
# TODO: Address this in a more robust way.

"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""
Exposes a URL that specifies the behavior of this scalar.
"""
directive @specifiedBy(
  """
  The URL that specifies the behavior of this scalar.
  """
  url: String!
) on SCALAR

"""
Autogenerated input type of AcceptZenhubOrganizationInvite
"""
input AcceptZenhubOrganizationInviteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A token issued for ZenhubOrganizationInvite
  """
  token: String!
}

"""
Autogenerated return type of AcceptZenhubOrganizationInvite.
"""
type AcceptZenhubOrganizationInvitePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubOrganization: ZenhubOrganization!
}

union ActivityFeed = Comment | TimelineItem

"""
The connection type for ActivityFeed.
"""
type ActivityFeedConnection {
  """
  A list of edges.
  """
  edges: [ActivityFeedEdge!]!

  """
  A list of nodes.
  """
  nodes: [ActivityFeed!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ActivityFeedEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ActivityFeed
}

interface ActivityFeedField {
  activityFeed(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    skipTimelineItems: Boolean
  ): ActivityFeedConnection
}

"""
Autogenerated input type of AddAssigneesToIssues
"""
input AddAssigneesToIssuesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
  assigneeIds: [ID!]!
}

"""
Autogenerated return type of AddAssigneesToIssues.
"""
type AddAssigneesToIssuesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  successCount: Int!
  unassignable: [Unassignable!]!
}

"""
Autogenerated input type of AddAssigneesToZenhubEpics
"""
input AddAssigneesToZenhubEpicsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Ids of ZenhubUsers
  """
  assigneeIds: [ID!]!
  zenhubEpicIds: [ID!]!
}

"""
Autogenerated return type of AddAssigneesToZenhubEpics.
"""
type AddAssigneesToZenhubEpicsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpics: [ZenhubEpic!]!
}

"""
Autogenerated input type of AddEpicsToProject
"""
input AddEpicsToProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  projectId: ID!
  epicIds: [ID!]!
}

"""
Autogenerated return type of AddEpicsToProject.
"""
type AddEpicsToProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  epics: [Epic!]!
  previousProjects: [Project]!
  project: Project!
}

"""
Autogenerated input type of AddEpicsToRoadmap
"""
input AddEpicsToRoadmapInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  epicIds: [ID!]!

  """
  Roadmap id can be retrieved from the workspace object
  """
  roadmapId: ID!
}

"""
Autogenerated return type of AddEpicsToRoadmap.
"""
type AddEpicsToRoadmapPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  epics: [Epic!]!
  roadmap: Roadmap!
}

"""
Autogenerated input type of AddEstimateSetValue
"""
input AddEstimateSetValueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  repositoryId: ID
  value: Float!
}

"""
Autogenerated return type of AddEstimateSetValue.
"""
type AddEstimateSetValuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  estimateSet: EstimateSet!
}

"""
Autogenerated input type of AddIssuesToEpics
"""
input AddIssuesToEpicsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
  epicIds: [ID!]!
}

"""
Autogenerated return type of AddIssuesToEpics.
"""
type AddIssuesToEpicsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  epics: [Epic!]!
}

"""
Autogenerated input type of AddIssuesToReleases
"""
input AddIssuesToReleasesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
  releaseIds: [ID!]!
}

"""
Autogenerated return type of AddIssuesToReleases.
"""
type AddIssuesToReleasesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  releases: [Release!]!
}

"""
Autogenerated input type of AddIssuesToSprints
"""
input AddIssuesToSprintsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
  sprintIds: [ID!]!
}

"""
Autogenerated return type of AddIssuesToSprints.
"""
type AddIssuesToSprintsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  sprintIssues: [SprintIssue!]!
}

"""
Autogenerated input type of AddIssuesToZenhubEpics
"""
input AddIssuesToZenhubEpicsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
  zenhubEpicIds: [ID!]!
}

"""
Autogenerated return type of AddIssuesToZenhubEpics.
"""
type AddIssuesToZenhubEpicsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpics: [ZenhubEpic!]!
}

"""
Autogenerated input type of AddLabelsToIssues
"""
input AddLabelsToIssuesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!

  """
  One of two label arguments is required
  """
  labelIds: [ID!]

  """
  One of two label arguments is required
  """
  labelInfos: [LabelInfoInput!]
}

"""
Autogenerated return type of AddLabelsToIssues.
"""
type AddLabelsToIssuesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  labels: [Label!]!
  successCount: Int!
}

"""
Autogenerated input type of AddMilestoneForIssues
"""
input AddMilestoneForIssuesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
  milestoneId: ID!
}

"""
Autogenerated return type of AddMilestoneForIssues.
"""
type AddMilestoneForIssuesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  successCount: Int!
}

"""
Autogenerated input type of AddProjectsToRoadmap
"""
input AddProjectsToRoadmapInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  roadmapId: ID!
  projectIds: [ID!]!
}

"""
Autogenerated return type of AddProjectsToRoadmap.
"""
type AddProjectsToRoadmapPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  projects: [Project!]!
  roadmap: Roadmap!
}

"""
Autogenerated input type of AddRepositoriesToRelease
"""
input AddRepositoriesToReleaseInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Github ids of repositories to add to the release
  """
  repositoryGhIds: [Int!]!
  releaseId: ID!
}

"""
Autogenerated return type of AddRepositoriesToRelease.
"""
type AddRepositoriesToReleasePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  release: Release!
}

"""
Autogenerated input type of AddRepositoryToWorkspace
"""
input AddRepositoryToWorkspaceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceId: ID!

  """
  Github ids of repositories to add to the workspace
  """
  repositoryGhId: ID!
}

"""
Autogenerated return type of AddRepositoryToWorkspace.
"""
type AddRepositoryToWorkspacePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceRepository: WorkspaceRepository!
}

"""
Autogenerated input type of AddWorkspaceLabelFilters
"""
input AddWorkspaceLabelFiltersInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceId: ID!

  """
  Only show issues with these labels for the workspace
  """
  labelNames: [String!]!
}

"""
Autogenerated return type of AddWorkspaceLabelFilters.
"""
type AddWorkspaceLabelFiltersPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspace: Workspace!

  """
  created label filters
  """
  workspaceLabelFilters: [WorkspaceLabelFilter!]!
}

"""
Autogenerated input type of AddZenhubAssigneesToIssues
"""
input AddZenhubAssigneesToIssuesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
  zenhubUserIds: [ID!]!
}

"""
Autogenerated return type of AddZenhubAssigneesToIssues.
"""
type AddZenhubAssigneesToIssuesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issues: [Issue!]!
}

"""
Autogenerated input type of AddZenhubEpicsToProject
"""
input AddZenhubEpicsToProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  projectId: ID!
  zenhubEpicIds: [ID!]!
}

"""
Autogenerated return type of AddZenhubEpicsToProject.
"""
type AddZenhubEpicsToProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  previousProjects: [Project]!
  project: Project!
  zenhubEpics: [ZenhubEpic!]!
}

"""
Autogenerated input type of AddZenhubEpicsToRoadmap
"""
input AddZenhubEpicsToRoadmapInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Roadmap id can be retrieved from the workspace object
  """
  roadmapId: ID!
  zenhubEpicIds: [ID!]!
}

"""
Autogenerated return type of AddZenhubEpicsToRoadmap.
"""
type AddZenhubEpicsToRoadmapPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  roadmap: Roadmap!
  zenhubEpics: [ZenhubEpic!]!
}

"""
Autogenerated input type of AddZenhubLabelsToIssues
"""
input AddZenhubLabelsToIssuesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!

  """
  One of two label arguments is required
  """
  zenhubLabelIds: [ID!]

  """
  One of two label arguments is required
  """
  labelInfos: [LabelInfoInput!]
}

"""
Autogenerated return type of AddZenhubLabelsToIssues.
"""
type AddZenhubLabelsToIssuesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issues: [Issue!]!
}

"""
Autogenerated input type of AddZenhubLabelsToZenhubEpics
"""
input AddZenhubLabelsToZenhubEpicsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpicIds: [ID!]!

  """
  One of two label arguments is required
  """
  zenhubLabelIds: [ID!]

  """
  One of two label arguments is required
  """
  labelInfos: [LabelInfoInput!]
}

"""
Autogenerated return type of AddZenhubLabelsToZenhubEpics.
"""
type AddZenhubLabelsToZenhubEpicsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpics: [ZenhubEpic!]!
}

"""
Autogenerated input type of AddZenhubRepositoryToWorkspace
"""
input AddZenhubRepositoryToWorkspaceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceId: ID!
  repositoryId: ID!
}

"""
Autogenerated return type of AddZenhubRepositoryToWorkspace.
"""
type AddZenhubRepositoryToWorkspacePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceSharedZenhubRepository: WorkspaceSharedZenhubRepository!
}

"""
Autogenerated input type of AddZenhubUsersToWorkspace
"""
input AddZenhubUsersToWorkspaceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubUserIds: [ID!]!
  workspaceId: ID!
  workspaceUserRoles: [WorkspaceRoleInput!]
}

"""
Autogenerated return type of AddZenhubUsersToWorkspace.
"""
type AddZenhubUsersToWorkspacePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspace: Workspace!
  zenhubUsers: [ZenhubUser!]!
}

input AiAcceptanceCriteriaMetadataInput {
  requestIds: [String!]!
}

input AiLabelSuggestionsMetadataInput {
  requestIds: [String!]!
}

input AiMetadataInput {
  acceptanceCriteria: AiAcceptanceCriteriaMetadataInput
  labelSuggestions: AiLabelSuggestionsMetadataInput
}

type AnomalousIssue {
  duration: Int!
  issue: Issue!
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

type Blockage implements Node & Timestamps {
  blocked: IssueDependencyItem!
  blocking: IssueDependencyItem!
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
}

type Bot implements Owner & Timestamps {
  avatarUrl: String!
  createdAt: ISO8601DateTime!
  ghId: Int
  hasWorkspace: Boolean!
  id: ID!
  login: String!
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection!

  """
  Repositories favorited by this github user
  """
  repositoryFavorites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryFavoriteConnection!
  roadmapItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    state: RoadmapItemStateFilterInput
  ): RoadmapItemConnection!
  searchWorkspaces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String!
    repositoryGhIds: [Int!]
  ): WorkspaceSearchMatchConnection!
  type: String!
  updatedAt: ISO8601DateTime!
  workspaceFavorites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkspaceFavoriteConnection!
}

enum BucketIssueHistoryAction {
  ISSUE_ADDED
  ISSUE_REMOVED
}

"""
Autogenerated input type of CloseIssues
"""
input CloseIssuesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
}

"""
Autogenerated return type of CloseIssues.
"""
type CloseIssuesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  successCount: Int!
}

type Comment implements Node & Timestamps {
  author: ZenhubUser!
  body: String!
  commentable: Commentable!
  createdAt: ISO8601DateTime!
  editor: ZenhubUser
  htmlBody: String!

  """
  ID of the object.
  """
  id: ID!
  lastEditedAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

union Commentable = Issue | ZenhubEpic

"""
The connection type for Comment.
"""
type CommentConnection {
  """
  A list of edges.
  """
  edges: [CommentEdge!]!

  """
  A list of nodes.
  """
  nodes: [Comment!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Comment!
}

"""
Autogenerated input type of ConvertZenhubIssueToGithubIssue
"""
input ConvertZenhubIssueToGithubIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Id of a zenhub issue
  """
  issueId: ID!

  """
  Github repository to move the issue to
  """
  repositoryId: ID!
}

"""
Autogenerated return type of ConvertZenhubIssueToGithubIssue.
"""
type ConvertZenhubIssueToGithubIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issue: Issue!
}

"""
Autogenerated input type of CreateComment
"""
input CreateCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  commentableId: ID!
  body: String!
}

"""
Autogenerated return type of CreateComment.
"""
type CreateCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateEpicFromIssue
"""
input CreateEpicFromIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueId: ID!

  """
  Ids of a issues to add to the epic
  """
  epicChildIds: [ID!]
}

"""
Autogenerated return type of CreateEpicFromIssue.
"""
type CreateEpicFromIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  epic: Epic!
}

"""
Autogenerated input type of CreateEpic
"""
input CreateEpicInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issue: IssueInput!
  aiMetadata: AiMetadataInput
}

"""
Autogenerated input type of CreateEpicOnProject
"""
input CreateEpicOnProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  projectId: ID!
  epic: EpicInput!
}

"""
Autogenerated return type of CreateEpicOnProject.
"""
type CreateEpicOnProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  epic: Epic!
  project: Project!
}

"""
Autogenerated input type of CreateEpicOnRoadmap
"""
input CreateEpicOnRoadmapInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  roadmapId: ID!
  epic: EpicInput!
}

"""
Autogenerated return type of CreateEpicOnRoadmap.
"""
type CreateEpicOnRoadmapPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  epic: Epic!
  roadmap: Roadmap!
}

"""
Autogenerated return type of CreateEpic.
"""
type CreateEpicPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  epic: Epic!
}

"""
Autogenerated input type of CreateGithubLabel
"""
input CreateGithubLabelInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  repositoryId: ID!
  name: String!
  color: String!
  description: String
}

"""
Autogenerated return type of CreateGithubLabel.
"""
type CreateGithubLabelPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  label: Label!
}

"""
Autogenerated input type of CreateIssueDependency
"""
input CreateIssueDependencyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  blockingIssue: IssueInfoInput!
  blockedIssue: IssueInfoInput!
}

"""
Autogenerated return type of CreateIssueDependency.
"""
type CreateIssueDependencyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueDependency: IssueDependency!
}

"""
Autogenerated input type of CreateIssue
"""
input CreateIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  repositoryId: ID!
  title: String!
  body: String
  labels: [String!]
  assignees: [String!]
  milestone: Int
  aiMetadata: AiMetadataInput
}

"""
Autogenerated return type of CreateIssue.
"""
type CreateIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issue: Issue!
}

"""
Autogenerated input type of CreateIssuePrConnection
"""
input CreateIssuePrConnectionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueId: ID!
  pullRequestId: ID!
}

"""
Autogenerated return type of CreateIssuePrConnection.
"""
type CreateIssuePrConnectionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issue: Issue!
  pullRequest: Issue!
}

"""
Autogenerated input type of CreateMilestone
"""
input CreateMilestoneInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  repositoryId: ID!
  title: String!
  description: String
  dueOn: ISO8601DateTime
  startDate: ISO8601DateTime
}

"""
Autogenerated return type of CreateMilestone.
"""
type CreateMilestonePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  milestone: Milestone!
}

"""
Autogenerated input type of CreatePipelineAutomation
"""
input CreatePipelineAutomationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineId: ID!

  """
  Possible values: for labels: { labels: [{ name:, color:}, { name:, color:}] }.
  For assignees: { assignees: [user1_eid, user2_eid] }. To remove all assignees
  pass empty array { assignees: [] }. For sprints: { sprints: [sprint1_eid,
  sprint2_eid] }. For epics: { epics: [epic1_eid, epic2_eid] }. For zenhub
  epics: { zenhubEpics: [epic1_eid, epic2_eid] }. For relative sprints: {
  relativeSprints: [0, 1, 2] }, where numbers are index of sprints from the
  current sprint. To remove all sprints pass empty array { relativeSprints: []
  }. for pipelines: { pipelines: [pipeline1_eid, pipeline2_eid] }
  """
  elementDetails: JSON!
}

"""
Autogenerated return type of CreatePipelineAutomation.
"""
type CreatePipelineAutomationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineAutomation: PipelineAutomation!
}

"""
Autogenerated input type of CreatePipeline
"""
input CreatePipelineInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceId: ID!
  name: String!

  """
  Integer value that represents the position of the pipeline inthe workspace.
  Starts with 0 that represents the leftmost position.
  """
  position: Int = -1
  description: String
}

"""
Autogenerated return type of CreatePipeline.
"""
type CreatePipelinePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipeline: Pipeline!
}

"""
Autogenerated input type of CreatePipelineToPipelineAutomation
"""
input CreatePipelineToPipelineAutomationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  sourcePipelineId: ID!
  destinationPipelineId: ID!
  applyRetroactively: Boolean = false
}

"""
Autogenerated return type of CreatePipelineToPipelineAutomation.
"""
type CreatePipelineToPipelineAutomationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  movedIssuesCount: Int
  pipelineToPipelineAutomation: PipelineToPipelineAutomation!
}

"""
Autogenerated input type of CreateProjectOnRoadmap
"""
input CreateProjectOnRoadmapInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  roadmapId: ID!
  project: ProjectInput!
}

"""
Autogenerated return type of CreateProjectOnRoadmap.
"""
type CreateProjectOnRoadmapPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  project: Project!
  roadmap: Roadmap!
}

"""
Autogenerated input type of CreateRelease
"""
input CreateReleaseInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  release: ReleaseCreateInput!
}

"""
Autogenerated return type of CreateRelease.
"""
type CreateReleasePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  release: Release!
}

"""
Autogenerated input type of CreateRoadmapKeyDate
"""
input CreateRoadmapKeyDateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  roadmapId: ID!
  date: ISO8601Date!
  description: String!
  color: String
}

"""
Autogenerated return type of CreateRoadmapKeyDate.
"""
type CreateRoadmapKeyDatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  keyDate: KeyDate!
  roadmap: Roadmap!
}

"""
Autogenerated input type of CreateSavedView
"""
input CreateSavedViewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceId: ID!
  name: String!
  filters: IssueSearchFiltersInput!
}

"""
Autogenerated return type of CreateSavedView.
"""
type CreateSavedViewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  savedView: SavedView!
}

"""
Autogenerated input type of CreateSprintConfig
"""
input CreateSprintConfigInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  sprintConfig: SprintConfigCreateInput!
}

"""
Autogenerated return type of CreateSprintConfig.
"""
type CreateSprintConfigPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  sprintConfig: SprintConfig!
}

"""
Autogenerated input type of CreateWorkspace
"""
input CreateWorkspaceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
  description: String
  zenhubOrganizationId: ID
  repositoryGhIds: [Int!]
  defaultRepositoryGhId: Int
  private: Boolean
  areUploadedFilesPrivate: Boolean
  githubProject: GithubProjectInput
  workspaceConfig: WorkspaceConfigInput
}

"""
Autogenerated return type of CreateWorkspace.
"""
type CreateWorkspacePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspace: Workspace!
}

"""
Autogenerated input type of CreateZenhubEpic
"""
input CreateZenhubEpicInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubOrganizationId: ID!
  zenhubEpic: ZenhubEpicInput!
  zenhubRepositoryId: ID
  aiMetadata: AiMetadataInput
}

"""
Autogenerated input type of CreateZenhubEpicKeyDate
"""
input CreateZenhubEpicKeyDateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpicId: ID!
  date: ISO8601Date!
  description: String!
}

"""
Autogenerated return type of CreateZenhubEpicKeyDate.
"""
type CreateZenhubEpicKeyDatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  keyDate: KeyDate!
  zenhubEpic: ZenhubEpic!
}

"""
Autogenerated input type of CreateZenhubEpicOnProject
"""
input CreateZenhubEpicOnProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  projectId: ID!
  zenhubEpic: ZenhubEpicInput!
  zenhubRepositoryId: ID
}

"""
Autogenerated return type of CreateZenhubEpicOnProject.
"""
type CreateZenhubEpicOnProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  project: Project!
  zenhubEpic: ZenhubEpic!
}

"""
Autogenerated input type of CreateZenhubEpicOnRoadmap
"""
input CreateZenhubEpicOnRoadmapInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  roadmapId: ID!
  zenhubEpic: ZenhubEpicInput!
}

"""
Autogenerated return type of CreateZenhubEpicOnRoadmap.
"""
type CreateZenhubEpicOnRoadmapPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  roadmap: Roadmap!
  zenhubEpic: ZenhubEpic!
}

"""
Autogenerated return type of CreateZenhubEpic.
"""
type CreateZenhubEpicPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpic: ZenhubEpic!
}

"""
Autogenerated input type of CreateZenhubLabel
"""
input CreateZenhubLabelInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubOrganizationId: ID!
  name: String!
  color: String!
  description: String
}

"""
Autogenerated return type of CreateZenhubLabel.
"""
type CreateZenhubLabelPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubLabel: ZenhubLabel!
}

"""
Autogenerated input type of CreateZenhubOrganization
"""
input CreateZenhubOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
}

"""
Autogenerated input type of CreateZenhubOrganizationInvite
"""
input CreateZenhubOrganizationInviteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubOrganizationId: ID!
  expireInDays: Int!
  emailProperties: EmailPropertiesInput
  workspaceId: ID
}

"""
Autogenerated return type of CreateZenhubOrganizationInvite.
"""
type CreateZenhubOrganizationInvitePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
}

"""
Autogenerated return type of CreateZenhubOrganization.
"""
type CreateZenhubOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubOrganization: ZenhubOrganization!
}

"""
Autogenerated input type of DeleteComment
"""
input DeleteCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  commentId: ID!
}

"""
Autogenerated return type of DeleteComment.
"""
type DeleteCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteEpicByIssueInfo
"""
input DeleteEpicByIssueInfoInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issue: IssueInfoInput!
}

"""
Autogenerated return type of DeleteEpicByIssueInfo.
"""
type DeleteEpicByIssueInfoPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  epic: Epic!
}

"""
Autogenerated input type of DeleteIssueDependency
"""
input DeleteIssueDependencyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  blockingIssue: IssueInfoInput!
  blockedIssue: IssueInfoInput!
}

"""
Autogenerated return type of DeleteIssueDependency.
"""
type DeleteIssueDependencyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueDependency: IssueDependency!
}

"""
Autogenerated input type of DeleteIssuePrConnection
"""
input DeleteIssuePrConnectionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueId: ID!
  pullRequestId: ID!
}

"""
Autogenerated return type of DeleteIssuePrConnection.
"""
type DeleteIssuePrConnectionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issue: Issue!
  pullRequest: Issue!
}

"""
Autogenerated input type of DeleteNotionIntegrationToken
"""
input DeleteNotionIntegrationTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteNotionIntegrationToken.
"""
type DeleteNotionIntegrationTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  notionUid: ID!
  zenhubUser: ZenhubUser!
}

"""
Autogenerated input type of DeletePipelineAutomation
"""
input DeletePipelineAutomationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineAutomationId: ID!
}

"""
Autogenerated return type of DeletePipelineAutomation.
"""
type DeletePipelineAutomationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineAutomation: PipelineAutomation!
}

"""
Autogenerated input type of DeletePipeline
"""
input DeletePipelineInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineId: ID!
  destinationPipelineId: ID!
}

"""
Autogenerated return type of DeletePipeline.
"""
type DeletePipelinePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  destinationPipeline: Pipeline!
}

"""
Autogenerated input type of DeletePipelineToPipelineAutomation
"""
input DeletePipelineToPipelineAutomationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineToPipelineAutomationId: ID!
}

"""
Autogenerated return type of DeletePipelineToPipelineAutomation.
"""
type DeletePipelineToPipelineAutomationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineToPipelineAutomation: PipelineToPipelineAutomation!
}

"""
Autogenerated input type of DeleteProject
"""
input DeleteProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  projectId: ID!
}

"""
Autogenerated return type of DeleteProject.
"""
type DeleteProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  projectId: ID!
}

"""
Autogenerated input type of DeleteRoadmapKeyDate
"""
input DeleteRoadmapKeyDateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  keyDateId: ID!
}

"""
Autogenerated return type of DeleteRoadmapKeyDate.
"""
type DeleteRoadmapKeyDatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  keyDate: KeyDate!
  roadmap: Roadmap!
}

"""
Autogenerated input type of DeleteSavedView
"""
input DeleteSavedViewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  savedViewId: ID!
}

"""
Autogenerated return type of DeleteSavedView.
"""
type DeleteSavedViewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  savedView: SavedView!
}

"""
Autogenerated input type of DeleteSprintConfigAndOpenSprints
"""
input DeleteSprintConfigAndOpenSprintsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceId: ID!
}

"""
Autogenerated return type of DeleteSprintConfigAndOpenSprints.
"""
type DeleteSprintConfigAndOpenSprintsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspace: Workspace!
}

"""
Autogenerated input type of DeleteWorkspaceFavorite
"""
input DeleteWorkspaceFavoriteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceId: ID!
}

"""
Autogenerated return type of DeleteWorkspaceFavorite.
"""
type DeleteWorkspaceFavoritePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspace: Workspace!
}

"""
Autogenerated input type of DeleteWorkspace
"""
input DeleteWorkspaceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceId: ID!
}

"""
Autogenerated return type of DeleteWorkspace.
"""
type DeleteWorkspacePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceId: ID!
}

"""
Autogenerated input type of DeleteZenhubEpic
"""
input DeleteZenhubEpicInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpicId: ID!
}

"""
Autogenerated input type of DeleteZenhubEpicKeyDate
"""
input DeleteZenhubEpicKeyDateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  keyDateId: ID!
}

"""
Autogenerated return type of DeleteZenhubEpicKeyDate.
"""
type DeleteZenhubEpicKeyDatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  keyDate: KeyDate!
  zenhubEpic: ZenhubEpic!
}

"""
Autogenerated return type of DeleteZenhubEpic.
"""
type DeleteZenhubEpicPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpicId: ID!
}

"""
Autogenerated input type of DeleteZenhubIssue
"""
input DeleteZenhubIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueId: ID!
}

"""
Autogenerated return type of DeleteZenhubIssue.
"""
type DeleteZenhubIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueId: ID!
}

"""
Autogenerated input type of DeleteZenhubLabels
"""
input DeleteZenhubLabelsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubOrganizationId: ID!
  names: [String!]!
}

"""
Autogenerated return type of DeleteZenhubLabels.
"""
type DeleteZenhubLabelsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubLabels: [ZenhubLabel!]!
}

"""
Autogenerated input type of DeleteZenhubOrganizationInviteRecipients
"""
input DeleteZenhubOrganizationInviteRecipientsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubOrganizationInviteRecipientIds: [ID!]!
}

"""
Autogenerated return type of DeleteZenhubOrganizationInviteRecipients.
"""
type DeleteZenhubOrganizationInviteRecipientsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteZenhubOrganizationInvites
"""
input DeleteZenhubOrganizationInvitesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubOrganizationInviteIds: [ID!]!
}

"""
Autogenerated return type of DeleteZenhubOrganizationInvites.
"""
type DeleteZenhubOrganizationInvitesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteZenhubUser
"""
input DeleteZenhubUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  autoAssignAdmin: Boolean = true
}

"""
Autogenerated return type of DeleteZenhubUser.
"""
type DeleteZenhubUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubUserId: ID!
}

"""
Autogenerated input type of DisconnectGithubUser
"""
input DisconnectGithubUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DisconnectGithubUser.
"""
type DisconnectGithubUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubUser: ZenhubUser!
}

"""
Autogenerated input type of DisconnectWorkspaceRepository
"""
input DisconnectWorkspaceRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceId: ID!
  repositoryGhId: Int!
}

"""
Autogenerated return type of DisconnectWorkspaceRepository.
"""
type DisconnectWorkspaceRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspace: Workspace!
}

"""
Autogenerated input type of DismissConnectNotionPrompt
"""
input DismissConnectNotionPromptInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DismissConnectNotionPrompt.
"""
type DismissConnectNotionPromptPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubUser: ZenhubUser!
}

enum DisplayFilter {
  """
  Includes Issues and PRs
  """
  all

  """
  Includes only Issues
  """
  issues

  """
  Includes only PRs
  """
  prs
}

"""
Autogenerated input type of DuplicatePipelineAutomation
"""
input DuplicatePipelineAutomationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineAutomationId: ID!
}

"""
Autogenerated return type of DuplicatePipelineAutomation.
"""
type DuplicatePipelineAutomationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineAutomation: PipelineAutomation!
}

"""
Input properties needed to send email notifications
"""
input EmailPropertiesInput {
  recipients: [String!]!
}

type Epic implements IssueProgress & Node & RoadmapItemDates & Timestamps & ViewerPermission {
  childIssues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    filters: IssueFiltersInput
  ): IssueConnection!
  createdAt: ISO8601DateTime!
  endOn(roadmapId: ID): ISO8601Date
  id: ID!
  issue: Issue!
  issueCountProgress: IssueCountProgress
  issueEstimateProgress: IssueEstimateProgress
  project: Project
  startOn(roadmapId: ID): ISO8601Date
  updatedAt: ISO8601DateTime!
  viewerPermission: PermissionLevel!
}

"""
Filter issue search results
"""
input EpicAssignableIssueSearchFiltersInput {
  repositoryIds: [ID!]!
  pipelineIds: [ID!]!
}

input EpicIssueByInfoInput {
  repositoryGhId: Int!
  issueNumber: Int!
}

"""
The connection type for Epic.
"""
type EpicConnection {
  """
  A list of edges.
  """
  edges: [EpicEdge!]!

  """
  A list of nodes.
  """
  nodes: [Epic!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EpicEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Epic!
}

input EpicInput {
  issue: IssueInput!
}

enum EpicOrderField {
  CREATED_AT
  TITLE
}

"""
Order of Epic connection
"""
input EpicOrderInput {
  direction: OrderDirection
  field: EpicOrderField
}

"""
Filter issues by special epic filters
"""
input EpicSearchFiltersInput {
  id: IdInput
  specialFilters: EpicSpecialFilter
}

enum EpicSpecialFilter {
  """
  Show all epics and subtasks
  """
  epics_with_subtasks

  """
  Show all epics and hide subtasks
  """
  epics_only

  """
  Show all issues not in an epic
  """
  not_in_epic

  """
  Hide epics
  """
  no_epics
}

type Estimate implements Timestamps {
  createdAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
  value: Float!
}

"""
Filter issues by special estimate filters
"""
input EstimateSearchFiltersInput {
  values: FloatInput
  specialFilters: EstimateSpecialFilter
}

type EstimateSet {
  repository: Repository!
  values: [Float!]!
}

enum EstimateSpecialFilter {
  """
  Issues assigned for voting
  """
  assigned_for_voting

  """
  Issues assigned to user for voting
  """
  assigned_to_user_for_voting

  """
  Issues not estimated
  """
  not_estimated
}

type EstimationGroup {
  id: ID!
  inviter: ZenhubUser!
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    issueIds: [ID!]!
  ): ZenhubUserConnection!
  workspace: Workspace!
}

"""
The connection type for EstimationGroup.
"""
type EstimationGroupConnection {
  """
  A list of edges.
  """
  edges: [EstimationGroupEdge!]!

  """
  A list of nodes.
  """
  nodes: [EstimationGroup!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EstimationGroupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EstimationGroup!
}

type EstimationVote implements Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  issue: Issue!
  updatedAt: ISO8601DateTime!
  value: Float
  voter: ZenhubUser!
}

"""
The connection type for EstimationVote.
"""
type EstimationVoteConnection {
  """
  A list of edges.
  """
  edges: [EstimationVoteEdge!]!

  """
  A list of nodes.
  """
  nodes: [EstimationVote!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EstimationVoteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EstimationVote!
}

"""
Filter a String column
"""
input FloatInput {
  notInAny: Boolean = false
  in: [Float!]
  nin: [Float!]
}

"""
Autogenerated input type of GenerateSprintReview
"""
input GenerateSprintReviewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  sprintId: ID!
  callAsync: Boolean = false
}

"""
Autogenerated return type of GenerateSprintReview.
"""
type GenerateSprintReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  sprintReview: SprintReview
}

"""
A reference to a GitHub project via Github repository node id and repository id
"""
input GithubProjectInput {
  githubProjectId: String!
  githubProjectRepoGhId: Int!
}

interface GithubTimestamps {
  ghCreatedAt: ISO8601DateTime!
  ghUpdatedAt: ISO8601DateTime!
}

"""
Filter an ID column
"""
input IdInput {
  notInAny: Boolean = false
  in: [ID!]
  nin: [ID!]
}

"""
Autogenerated input type of InviteToEstimate
"""
input InviteToEstimateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
  zenhubUserIds: [ID!]!
  workspaceId: ID

  """
  Text that will be sent to the invited users through GH notifications
  """
  message: String
}

"""
Autogenerated return type of InviteToEstimate.
"""
type InviteToEstimatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  estimationVotes: [EstimationVote!]!
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Issue implements ActivityFeedField & GithubTimestamps & Node & Timestamps & ViewerPermission {
  activityFeed(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    skipTimelineItems: Boolean
  ): ActivityFeedConnection
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Issues that are blocked by this Issue.
  """
  blockedIssues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    filters: IssueFiltersInput
  ): IssueConnection!

  """
  Dependent items that are blocked by this issue
  """
  blockedItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    filters: IssueDependencyItemFiltersInput
  ): IssueDependencyItemConnection!

  """
  Issues that are blocking this Issue.
  """
  blockingIssues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    filters: IssueFiltersInput
  ): IssueConnection!

  """
  Dependent items that are blocking this issue
  """
  blockingItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    filters: IssueDependencyItemFiltersInput
  ): IssueDependencyItemConnection!
  body: String
  closedAt: ISO8601DateTime
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommentConnection!

  """
  Return the Pull Requests connected to this issue
  """
  connectedPrs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection!

  """
  1st step connections of the PR. Only available for PRs
  """
  connections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection!
  createdAt: ISO8601DateTime!
  epic: Epic @deprecated(reason: "This field must not be used.")
  estimate: Estimate

  """
  Estimates given by participants
  """
  estimationVotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EstimationVoteConnection!
  ghCreatedAt: ISO8601DateTime!
  ghId: Int
  ghNodeId: ID
  ghUpdatedAt: ISO8601DateTime!
  htmlBody: String
  htmlUrl: String!
  id: ID!
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection!
  milestone: Milestone
  number: Int!
  parentEpics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EpicConnection!
    @deprecated(reason: "This field must not be used. Use parentZenhubEpics.")
  parentZenhubEpics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ZenhubEpicConnection!

  """
  Issue connections to different pipelines
  """
  pipelineIssue(workspaceId: ID!): PipelineIssue
  pipelineIssues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PipelineIssueConnection!
  pullRequest: Boolean!
  pullRequestObject: PullRequest
  pullRequestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection
  releases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReleaseConnection!
  repository: Repository!
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  Sprints that the issue belongs to
  """
  sprints(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    workspaceId: ID
  ): SprintConnection!
  state: IssueState!
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimelineItemConnection!
  title: String!

  """
  Github or Zebhub issue
  """
  type: IssueType!
  updatedAt: ISO8601DateTime!

  """
  Issue creator; Only available for GitHub Issues
  """
  user: Owner!
  viewerPermission: PermissionLevel!
  zenhubAssignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ZenhubUserConnection!
  zenhubLabels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ZenhubLabelConnection!
}

"""
Filter by issue bucket IDs
"""
input IssueBucketIdsInput {
  ids: [ID!]
}

"""
The connection type for Issue.
"""
type IssueConnection {
  """
  A list of edges.
  """
  edges: [IssueEdge!]!

  """
  A list of nodes.
  """
  nodes: [Issue!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  pipelineCounts: PipelineCounts!
  splitCounts: JSON!
    @deprecated(reason: "Use common field pipelineCounts instead")
  sumEstimates: Float!
    @deprecated(reason: "Use common field pipelineCounts instead")
  totalCount: Int!
}

type IssueCountProgress {
  closed: Int!
  open: Int!
  total: Int!
}

type IssueDependency implements Node & Timestamps {
  blockedIssue: Issue!
  blockingIssue: Issue!
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for IssueDependency.
"""
type IssueDependencyConnection {
  """
  A list of edges.
  """
  edges: [IssueDependencyEdge!]!

  """
  A list of nodes.
  """
  nodes: [IssueDependency!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type IssueDependencyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: IssueDependency!
}

union IssueDependencyItem = Issue | ZenhubEpic

"""
The connection type for IssueDependencyItem.
"""
type IssueDependencyItemConnection {
  """
  A list of edges.
  """
  edges: [IssueDependencyItemEdge!]!

  """
  A list of nodes.
  """
  nodes: [IssueDependencyItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type IssueDependencyItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: IssueDependencyItem
}

"""
Filter source/target fields in issue dependency
"""
input IssueDependencyItemFiltersInput {
  state: IssueDependencyItemStateInput
}

enum IssueDependencyItemState {
  OPEN
  CLOSED
}

"""
Filter by IssueDependencyItemState
"""
input IssueDependencyItemStateInput {
  eq: IssueDependencyItemState!
}

"""
An edge in a connection.
"""
type IssueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Issue!
}

type IssueEstimateProgress {
  closed: Float!
  open: Float!
  total: Float!
}

"""
Filter Issues
"""
input IssueFiltersInput {
  repositoryId: IdInput
  state: IssueStateInput
}

type IssueFlowStats {
  anomalies: [AnomalousIssue!]
  avgCycleDays: Int
  inDevelopmentDays: Int
  inReviewDays: Int
}

"""
A reference to an issue via github or zenhub repository and issue number
"""
input IssueInfoInput {
  repositoryGhId: Int
  repositoryId: ID
  issueNumber: Int!
}

input IssueInput {
  repositoryId: ID
  repositoryGhId: Int
  title: String!
  body: String
  labels: [String!]
  assignees: [String!]
  milestone: Int
}

type IssueLabelOption {
  color: String
  name: String!
}

"""
The connection type for IssueLabelOption.
"""
type IssueLabelOptionConnection {
  """
  A list of edges.
  """
  edges: [IssueLabelOptionEdge!]!

  """
  A list of nodes.
  """
  nodes: [IssueLabelOption!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type IssueLabelOptionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: IssueLabelOption!
}

enum IssueOrderField {
  """
  Order by assignee logins
  """
  assignees

  """
  Order by issue created_at
  """
  created_at

  """
  Order by issue updated_at
  """
  updated_at

  """
  Order by sprint dates
  """
  sprints

  """
  Order by issue title
  """
  title

  """
  Order by issue estimate
  """
  estimate

  """
  Order by whether issue is stale or not
  """
  stale
}

"""
Sort issue search results
"""
input IssueOrderInput {
  field: IssueOrderField!
  direction: OrderDirection!
}

interface IssueProgress {
  issueCountProgress: IssueCountProgress
  issueEstimateProgress: IssueEstimateProgress
}

"""
Filter issue search results
"""
input IssueSearchFiltersInput {
  repositoryIds: [ID!]

  """
  Filter by all or any of the filters
  """
  matchType: MatchingFilter = all

  """
  Show or hide pull requests
  """
  displayType: DisplayFilter = all
  labels: StringInput

  """
  Filter by assigned users using user logins
  """
  assignees: IssueUserLoginInput

  """
  Filter by assigned users using user IDs
  """
  assigneeIds: IssueUserIdInput

  """
  Filter by issue creator using user logins
  """
  users: IssueUserLoginInput

  """
  Filter by issue creator using user IDs
  """
  userIds: IssueUserIdInput
  sprints: SprintIdInput
  releases: IdInput
  milestones: StringInput
  estimates: EstimateSearchFiltersInput
  zenhubEpics: ZenhubEpicSearchFiltersInput
  issueBuckets: IssueBucketIdsInput
}

enum IssueState {
  OPEN
  CLOSED
}

"""
Filter for Issue state
"""
input IssueStateFilterInput {
  in: [IssueState!]
  nin: [IssueState!]
}

"""
Filter by IssueState
"""
input IssueStateInput {
  eq: IssueState!
}

type IssueTemplate {
  body: String!
  default: Boolean!
  id: ID!
  metadata: JSON
  path: String!
  raw: String!
  repository: Repository!
}

"""
The connection type for IssueTemplate.
"""
type IssueTemplateConnection {
  """
  A list of edges.
  """
  edges: [IssueTemplateEdge!]!

  """
  A list of nodes.
  """
  nodes: [IssueTemplate!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type IssueTemplateEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: IssueTemplate!
}

enum IssueType {
  GithubIssue
  ZenhubIssue
}

"""
Filter an ID column
"""
input IssueUserIdInput {
  notInAny: Boolean = false
  in: [ID!]
  nin: [ID!]
}

"""
Filter an ID column
"""
input IssueUserLoginInput {
  notInAny: Boolean = false

  """
  List of GH user logins or ZH user emails
  """
  in: [String!]

  """
  List of GH user logins or ZH user emails
  """
  nin: [String!]
}

type IssueUserOption {
  githubUser: User
  zenhubUser: ZenhubUser
}

"""
The connection type for IssueUserOption.
"""
type IssueUserOptionConnection {
  """
  A list of edges.
  """
  edges: [IssueUserOptionEdge!]!

  """
  A list of nodes.
  """
  nodes: [IssueUserOption!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type IssueUserOptionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: IssueUserOption!
}

"""
Represents untyped JSON
"""
scalar JSON

type KeyDate implements Node {
  color: String
  date: ISO8601Date!
  description: String!
  id: ID!
}

"""
The connection type for KeyDate.
"""
type KeyDateConnection {
  """
  A list of edges.
  """
  edges: [KeyDateEdge!]!

  """
  A list of nodes.
  """
  nodes: [KeyDate!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type KeyDateEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: KeyDate!
}

type Label implements Timestamps {
  color: String
  createdAt: ISO8601DateTime!
  description: String
  ghId: BigInt!
  ghNodeId: ID!
  id: ID!
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection!
  name: String!
  repository: Repository!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Label.
"""
type LabelConnection {
  """
  A list of edges.
  """
  edges: [LabelEdge!]!

  """
  A list of nodes.
  """
  nodes: [Label!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LabelEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Label!
}

input LabelInfoInput {
  name: String
  color: String
}

"""
Autogenerated input type of LeaveZenhubOrganization
"""
input LeaveZenhubOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubOrganizationId: ID!
  autoAssignAdmin: Boolean = true
}

"""
Autogenerated return type of LeaveZenhubOrganization.
"""
type LeaveZenhubOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubOrganization: ZenhubOrganization!
}

type Mannequin implements Owner & Timestamps {
  avatarUrl: String!
  createdAt: ISO8601DateTime!
  ghId: Int
  hasWorkspace: Boolean!
  id: ID!
  login: String!
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection!

  """
  Repositories favorited by this github user
  """
  repositoryFavorites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryFavoriteConnection!
  roadmapItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    state: RoadmapItemStateFilterInput
  ): RoadmapItemConnection!
  searchWorkspaces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String!
    repositoryGhIds: [Int!]
  ): WorkspaceSearchMatchConnection!
  type: String!
  updatedAt: ISO8601DateTime!
  workspaceFavorites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkspaceFavoriteConnection!
}

enum MatchingFilter {
  """
  Include records that match any filters
  """
  any

  """
  Include records that match all filters
  """
  all
}

"""
Autogenerated input type of MigrateGheTransferredRepository
"""
input MigrateGheTransferredRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  oldRepository: String!
  newRepository: String!
}

"""
Autogenerated return type of MigrateGheTransferredRepository.
"""
type MigrateGheTransferredRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  state: String!
}

type Milestone implements GithubTimestamps & Timestamps {
  closedAt: ISO8601DateTime
  closedIssuesCount: Int!
  createdAt: ISO8601DateTime!
  creator: Owner
  description: String
  dueOn: ISO8601DateTime
  ghCreatedAt: ISO8601DateTime!
  ghId: Int!
  ghNodeId: ID!
  ghUpdatedAt: ISO8601DateTime!
  id: ID!
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection!
  number: Int!
  openIssuesCount: Int!
  repository: Repository!
  startDate: ISO8601DateTime
  state: MilestoneState!
  title: String!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Milestone.
"""
type MilestoneConnection {
  """
  A list of edges.
  """
  edges: [MilestoneEdge!]!

  """
  A list of nodes.
  """
  nodes: [Milestone!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MilestoneEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Milestone!
}

enum MilestoneState {
  OPEN
  CLOSED
}

"""
Autogenerated input type of MoveAllPipelineIssues
"""
input MoveAllPipelineIssuesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineIds: [ID!]!
  destinationPipelineId: ID!
}

"""
Autogenerated return type of MoveAllPipelineIssues.
"""
type MoveAllPipelineIssuesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspace: Workspace!
}

"""
Autogenerated input type of MoveIssue
"""
input MoveIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineId: ID!
  issueId: ID!
  position: Int = 0
}

"""
Autogenerated return type of MoveIssue.
"""
type MoveIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issue: Issue!
  pipeline: Pipeline!
}

"""
Autogenerated input type of MoveIssueRelativeTo
"""
input MoveIssueRelativeToInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueId: ID!
  position: PipelineIssuePosition
  pipelineId: ID
  afterPipelineIssueId: ID
  beforePipelineIssueId: ID
}

"""
Autogenerated return type of MoveIssueRelativeTo.
"""
type MoveIssueRelativeToPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineIssueMove: PipelineIssueMove!
}

"""
Autogenerated input type of MovePipelineIssues
"""
input MovePipelineIssuesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineId: ID!
  pipelineIssueIds: [ID!]!
  position: PipelineIssuePosition
  afterPipelineIssueId: ID
  beforePipelineIssueId: ID
}

"""
Autogenerated return type of MovePipelineIssues.
"""
type MovePipelineIssuesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipeline: Pipeline!
  pipelineIssues: [PipelineIssue!]!
}

"""
Autogenerated input type of MoveRoadmapItemRelativeTo
"""
input MoveRoadmapItemRelativeToInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  roadmapId: ID!
  itemId: ID!
  afterItemId: ID
  beforeItemId: ID
}

"""
Autogenerated return type of MoveRoadmapItemRelativeTo.
"""
type MoveRoadmapItemRelativeToPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  item: RoadmapItem!
}

"""
Autogenerated input type of MoveZenhubIssueToWorkspace
"""
input MoveZenhubIssueToWorkspaceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueId: ID!
  workspaceId: ID!
}

"""
Autogenerated return type of MoveZenhubIssueToWorkspace.
"""
type MoveZenhubIssueToWorkspacePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issue: Issue!
}

type Mutation {
  """
  Accept an invitation to ZenhubOrganization
  """
  acceptZenhubOrganizationInvite(
    """
    Parameters for AcceptZenhubOrganizationInvite
    """
    input: AcceptZenhubOrganizationInviteInput!
  ): AcceptZenhubOrganizationInvitePayload

  """
  Add assignees to multiple Issues
  """
  addAssigneesToIssues(
    """
    Parameters for AddAssigneesToIssues
    """
    input: AddAssigneesToIssuesInput!
  ): AddAssigneesToIssuesPayload

  """
  Add assignees to multiple zenhub_epics
  """
  addAssigneesToZenhubEpics(
    """
    Parameters for AddAssigneesToZenhubEpics
    """
    input: AddAssigneesToZenhubEpicsInput!
  ): AddAssigneesToZenhubEpicsPayload

  """
  Add Epics to a Project
  """
  addEpicsToProject(
    """
    Parameters for AddEpicsToProject
    """
    input: AddEpicsToProjectInput!
  ): AddEpicsToProjectPayload
    @deprecated(
      reason: "This mutation must not be used. Use addZenhubEpicsToProject."
    )

  """
  Add Epics to a Roadmap
  """
  addEpicsToRoadmap(
    """
    Parameters for AddEpicsToRoadmap
    """
    input: AddEpicsToRoadmapInput!
  ): AddEpicsToRoadmapPayload
    @deprecated(
      reason: "This mutation must not be used. Use addZenhubEpicsToRoadmap."
    )

  """
  Add a value to an EstimateSet
  """
  addEstimateSetValue(
    """
    Parameters for AddEstimateSetValue
    """
    input: AddEstimateSetValueInput!
  ): AddEstimateSetValuePayload

  """
  Adds Issues to Epics
  """
  addIssuesToEpics(
    """
    Parameters for AddIssuesToEpics
    """
    input: AddIssuesToEpicsInput!
  ): AddIssuesToEpicsPayload
    @deprecated(
      reason: "This mutation must not be used. Use addIssuesToZenhubEpics."
    )

  """
  Add Issues to Releases
  """
  addIssuesToReleases(
    """
    Parameters for AddIssuesToReleases
    """
    input: AddIssuesToReleasesInput!
  ): AddIssuesToReleasesPayload

  """
  Add Issues to Sprints
  """
  addIssuesToSprints(
    """
    Parameters for AddIssuesToSprints
    """
    input: AddIssuesToSprintsInput!
  ): AddIssuesToSprintsPayload

  """
  Adds Issues to Zenhub Epics
  """
  addIssuesToZenhubEpics(
    """
    Parameters for AddIssuesToZenhubEpics
    """
    input: AddIssuesToZenhubEpicsInput!
  ): AddIssuesToZenhubEpicsPayload

  """
  Add labels to multiple Issues
  """
  addLabelsToIssues(
    """
    Parameters for AddLabelsToIssues
    """
    input: AddLabelsToIssuesInput!
  ): AddLabelsToIssuesPayload

  """
  Add milestone to multiple Issues
  """
  addMilestoneToIssues(
    """
    Parameters for AddMilestoneForIssues
    """
    input: AddMilestoneForIssuesInput!
  ): AddMilestoneForIssuesPayload

  """
  Add Projects to a Roadmap
  """
  addProjectsToRoadmap(
    """
    Parameters for AddProjectsToRoadmap
    """
    input: AddProjectsToRoadmapInput!
  ): AddProjectsToRoadmapPayload

  """
  Add repositories to a release
  """
  addRepositoriesToRelease(
    """
    Parameters for AddRepositoriesToRelease
    """
    input: AddRepositoriesToReleaseInput!
  ): AddRepositoriesToReleasePayload

  """
  Add a Repository to a Workspace
  """
  addRepositoryToWorkspace(
    """
    Parameters for AddRepositoryToWorkspace
    """
    input: AddRepositoryToWorkspaceInput!
  ): AddRepositoryToWorkspacePayload

  """
  Add label filters to a Workspace
  """
  addWorkspaceLabelFilters(
    """
    Parameters for AddWorkspaceLabelFilters
    """
    input: AddWorkspaceLabelFiltersInput!
  ): AddWorkspaceLabelFiltersPayload

  """
  Add zenhub users to multiple issues as assignees
  """
  addZenhubAssigneesToIssues(
    """
    Parameters for AddZenhubAssigneesToIssues
    """
    input: AddZenhubAssigneesToIssuesInput!
  ): AddZenhubAssigneesToIssuesPayload

  """
  Add Zenhub Epics to a Project
  """
  addZenhubEpicsToProject(
    """
    Parameters for AddZenhubEpicsToProject
    """
    input: AddZenhubEpicsToProjectInput!
  ): AddZenhubEpicsToProjectPayload

  """
  Add Zenhub epics to a Roadmap
  """
  addZenhubEpicsToRoadmap(
    """
    Parameters for AddZenhubEpicsToRoadmap
    """
    input: AddZenhubEpicsToRoadmapInput!
  ): AddZenhubEpicsToRoadmapPayload

  """
  Add zenhub labels to multiple issues
  """
  addZenhubLabelsToIssues(
    """
    Parameters for AddZenhubLabelsToIssues
    """
    input: AddZenhubLabelsToIssuesInput!
  ): AddZenhubLabelsToIssuesPayload

  """
  Add zenhub labels to multiple zenhub epics
  """
  addZenhubLabelsToZenhubEpics(
    """
    Parameters for AddZenhubLabelsToZenhubEpics
    """
    input: AddZenhubLabelsToZenhubEpicsInput!
  ): AddZenhubLabelsToZenhubEpicsPayload

  """
  Add a ZenhubRepository to a Workspace
  """
  addZenhubRepositoryToWorkspace(
    """
    Parameters for AddZenhubRepositoryToWorkspace
    """
    input: AddZenhubRepositoryToWorkspaceInput!
  ): AddZenhubRepositoryToWorkspacePayload

  """
  Add Zenhub users to a workspace
  """
  addZenhubUsersToWorkspace(
    """
    Parameters for AddZenhubUsersToWorkspace
    """
    input: AddZenhubUsersToWorkspaceInput!
  ): AddZenhubUsersToWorkspacePayload

  """
  Closes multiple issues at once
  """
  closeIssues(
    """
    Parameters for CloseIssues
    """
    input: CloseIssuesInput!
  ): CloseIssuesPayload

  """
  Convert Zenhub issue to Github issue
  """
  convertZenhubIssueToGithubIssue(
    """
    Parameters for ConvertZenhubIssueToGithubIssue
    """
    input: ConvertZenhubIssueToGithubIssueInput!
  ): ConvertZenhubIssueToGithubIssuePayload

  """
  Creates a comment
  """
  createComment(
    """
    Parameters for CreateComment
    """
    input: CreateCommentInput!
  ): CreateCommentPayload

  """
  Creates an Epic
  """
  createEpic(
    """
    Parameters for CreateEpic
    """
    input: CreateEpicInput!
  ): CreateEpicPayload
    @deprecated(reason: "This mutation must not be used. Use createZenhubEpic.")

  """
  Convert issue to an epic and add issues to it
  """
  createEpicFromIssue(
    """
    Parameters for CreateEpicFromIssue
    """
    input: CreateEpicFromIssueInput!
  ): CreateEpicFromIssuePayload
    @deprecated(reason: "This mutation must not be used. Use createZenhubEpic.")

  """
  Create an Epic on a Project
  """
  createEpicOnProject(
    """
    Parameters for CreateEpicOnProject
    """
    input: CreateEpicOnProjectInput!
  ): CreateEpicOnProjectPayload
    @deprecated(
      reason: "This mutation must not be used. Use createZenhubEpicOnProject."
    )

  """
  Create an Epic on a Roadmap
  """
  createEpicOnRoadmap(
    """
    Parameters for CreateEpicOnRoadmap
    """
    input: CreateEpicOnRoadmapInput!
  ): CreateEpicOnRoadmapPayload
    @deprecated(
      reason: "This mutation must not be used. Use createZenhubEpicOnRoadmap."
    )

  """
  Create a Github label
  """
  createGithubLabel(
    """
    Parameters for CreateGithubLabel
    """
    input: CreateGithubLabelInput!
  ): CreateGithubLabelPayload

  """
  Creates an Issue
  """
  createIssue(
    """
    Parameters for CreateIssue
    """
    input: CreateIssueInput!
  ): CreateIssuePayload

  """
  Creates a Dependency between two issues
  """
  createIssueDependency(
    """
    Parameters for CreateIssueDependency
    """
    input: CreateIssueDependencyInput!
  ): CreateIssueDependencyPayload
    @deprecated(reason: "Use createBlockage instead")

  """
  Creates Issue<->PR Connection
  """
  createIssuePrConnection(
    """
    Parameters for CreateIssuePrConnection
    """
    input: CreateIssuePrConnectionInput!
  ): CreateIssuePrConnectionPayload

  """
  Create a milestone
  """
  createMilestone(
    """
    Parameters for CreateMilestone
    """
    input: CreateMilestoneInput!
  ): CreateMilestonePayload

  """
  Create a new Pipeline
  """
  createPipeline(
    """
    Parameters for CreatePipeline
    """
    input: CreatePipelineInput!
  ): CreatePipelinePayload

  """
  Create a new Pipeline Automation
  """
  createPipelineAutomation(
    """
    Parameters for CreatePipelineAutomation
    """
    input: CreatePipelineAutomationInput!
  ): CreatePipelineAutomationPayload

  """
  Create a new PipelineToPipelineAutomation
  """
  createPipelineToPipelineAutomation(
    """
    Parameters for CreatePipelineToPipelineAutomation
    """
    input: CreatePipelineToPipelineAutomationInput!
  ): CreatePipelineToPipelineAutomationPayload

  """
  Create a Project on a Roadmap
  """
  createProjectOnRoadmap(
    """
    Parameters for CreateProjectOnRoadmap
    """
    input: CreateProjectOnRoadmapInput!
  ): CreateProjectOnRoadmapPayload

  """
  Create a release
  """
  createRelease(
    """
    Parameters for CreateRelease
    """
    input: CreateReleaseInput!
  ): CreateReleasePayload

  """
  Create a new key date for the roadmap
  """
  createRoadmapKeyDate(
    """
    Parameters for CreateRoadmapKeyDate
    """
    input: CreateRoadmapKeyDateInput!
  ): CreateRoadmapKeyDatePayload

  """
  Save board filters
  """
  createSavedView(
    """
    Parameters for CreateSavedView
    """
    input: CreateSavedViewInput!
  ): CreateSavedViewPayload

  """
  Creates a SprintConfig for a workspace
  """
  createSprintConfig(
    """
    Parameters for CreateSprintConfig
    """
    input: CreateSprintConfigInput!
  ): CreateSprintConfigPayload

  """
  Create a Workspace
  """
  createWorkspace(
    """
    Parameters for CreateWorkspace
    """
    input: CreateWorkspaceInput!
  ): CreateWorkspacePayload

  """
  Create a Zenhub epic
  """
  createZenhubEpic(
    """
    Parameters for CreateZenhubEpic
    """
    input: CreateZenhubEpicInput!
  ): CreateZenhubEpicPayload

  """
  Create a new key date for a Zenhub Epic
  """
  createZenhubEpicKeyDate(
    """
    Parameters for CreateZenhubEpicKeyDate
    """
    input: CreateZenhubEpicKeyDateInput!
  ): CreateZenhubEpicKeyDatePayload

  """
  Create a Zenhub Epic on a Project
  """
  createZenhubEpicOnProject(
    """
    Parameters for CreateZenhubEpicOnProject
    """
    input: CreateZenhubEpicOnProjectInput!
  ): CreateZenhubEpicOnProjectPayload

  """
  Create a Zenhub epic on a Roadmap
  """
  createZenhubEpicOnRoadmap(
    """
    Parameters for CreateZenhubEpicOnRoadmap
    """
    input: CreateZenhubEpicOnRoadmapInput!
  ): CreateZenhubEpicOnRoadmapPayload

  """
  Create a Zenhub label
  """
  createZenhubLabel(
    """
    Parameters for CreateZenhubLabel
    """
    input: CreateZenhubLabelInput!
  ): CreateZenhubLabelPayload

  """
  Create a Zenhub Organization
  """
  createZenhubOrganization(
    """
    Parameters for CreateZenhubOrganization
    """
    input: CreateZenhubOrganizationInput!
  ): CreateZenhubOrganizationPayload

  """
  Create ZenhubOrganization invite
  """
  createZenhubOrganizationInvite(
    """
    Parameters for CreateZenhubOrganizationInvite
    """
    input: CreateZenhubOrganizationInviteInput!
  ): CreateZenhubOrganizationInvitePayload

  """
  Deletes comment
  """
  deleteComment(
    """
    Parameters for DeleteComment
    """
    input: DeleteCommentInput!
  ): DeleteCommentPayload

  """
  Destroy epic and its dependents
  """
  deleteEpicByIssueInfo(
    """
    Parameters for DeleteEpicByIssueInfo
    """
    input: DeleteEpicByIssueInfoInput!
  ): DeleteEpicByIssueInfoPayload
    @deprecated(reason: "This mutation must not be used. Use deleteZenhubEpic.")

  """
  Delete a Dependency between two issues
  """
  deleteIssueDependency(
    """
    Parameters for DeleteIssueDependency
    """
    input: DeleteIssueDependencyInput!
  ): DeleteIssueDependencyPayload
    @deprecated(reason: "Use deleteBlockage instead")

  """
  Deletes Issue<->PR Connection
  """
  deleteIssuePrConnection(
    """
    Parameters for DeleteIssuePrConnection
    """
    input: DeleteIssuePrConnectionInput!
  ): DeleteIssuePrConnectionPayload

  """
  Deletes a Notion Integration Token
  """
  deleteNotionIntegrationToken(
    """
    Parameters for DeleteNotionIntegrationToken
    """
    input: DeleteNotionIntegrationTokenInput!
  ): DeleteNotionIntegrationTokenPayload

  """
  Delete a Pipeline
  """
  deletePipeline(
    """
    Parameters for DeletePipeline
    """
    input: DeletePipelineInput!
  ): DeletePipelinePayload

  """
  Delete a Pipeline Automation
  """
  deletePipelineAutomation(
    """
    Parameters for DeletePipelineAutomation
    """
    input: DeletePipelineAutomationInput!
  ): DeletePipelineAutomationPayload

  """
  Delete a PipelineToPipelineAutomation
  """
  deletePipelineToPipelineAutomation(
    """
    Parameters for DeletePipelineToPipelineAutomation
    """
    input: DeletePipelineToPipelineAutomationInput!
  ): DeletePipelineToPipelineAutomationPayload

  """
  Delete a Project
  """
  deleteProject(
    """
    Parameters for DeleteProject
    """
    input: DeleteProjectInput!
  ): DeleteProjectPayload

  """
  Delete a key date from the roadmap
  """
  deleteRoadmapKeyDate(
    """
    Parameters for DeleteRoadmapKeyDate
    """
    input: DeleteRoadmapKeyDateInput!
  ): DeleteRoadmapKeyDatePayload

  """
  Delete saved view
  """
  deleteSavedView(
    """
    Parameters for DeleteSavedView
    """
    input: DeleteSavedViewInput!
  ): DeleteSavedViewPayload

  """
  Delete a SprintConfig and open Sprints for a workspace
  """
  deleteSprintConfigAndOpenSprints(
    """
    Parameters for DeleteSprintConfigAndOpenSprints
    """
    input: DeleteSprintConfigAndOpenSprintsInput!
  ): DeleteSprintConfigAndOpenSprintsPayload

  """
  Deletes a Workspace
  """
  deleteWorkspace(
    """
    Parameters for DeleteWorkspace
    """
    input: DeleteWorkspaceInput!
  ): DeleteWorkspacePayload

  """
  Deletes a workspace favorite
  """
  deleteWorkspaceFavorite(
    """
    Parameters for DeleteWorkspaceFavorite
    """
    input: DeleteWorkspaceFavoriteInput!
  ): DeleteWorkspaceFavoritePayload

  """
  Delete zenhub epic
  """
  deleteZenhubEpic(
    """
    Parameters for DeleteZenhubEpic
    """
    input: DeleteZenhubEpicInput!
  ): DeleteZenhubEpicPayload

  """
  Delete a key date from a Zenhub Epic
  """
  deleteZenhubEpicKeyDate(
    """
    Parameters for DeleteZenhubEpicKeyDate
    """
    input: DeleteZenhubEpicKeyDateInput!
  ): DeleteZenhubEpicKeyDatePayload

  """
  Delete Zenhub issue
  """
  deleteZenhubIssue(
    """
    Parameters for DeleteZenhubIssue
    """
    input: DeleteZenhubIssueInput!
  ): DeleteZenhubIssuePayload

  """
  Delete Zenhub labels
  """
  deleteZenhubLabels(
    """
    Parameters for DeleteZenhubLabels
    """
    input: DeleteZenhubLabelsInput!
  ): DeleteZenhubLabelsPayload

  """
  Delete ZenhubOrganizationInvite recipients
  """
  deleteZenhubOrganizationInviteRecipients(
    """
    Parameters for DeleteZenhubOrganizationInviteRecipients
    """
    input: DeleteZenhubOrganizationInviteRecipientsInput!
  ): DeleteZenhubOrganizationInviteRecipientsPayload

  """
  Delete ZenhubOrganization invites
  """
  deleteZenhubOrganizationInvites(
    """
    Parameters for DeleteZenhubOrganizationInvites
    """
    input: DeleteZenhubOrganizationInvitesInput!
  ): DeleteZenhubOrganizationInvitesPayload

  """
  Delete Zenhub user
  """
  deleteZenhubUser(
    """
    Parameters for DeleteZenhubUser
    """
    input: DeleteZenhubUserInput!
  ): DeleteZenhubUserPayload

  """
  Disconnect Github from account
  """
  disconnectGithubUser(
    """
    Parameters for DisconnectGithubUser
    """
    input: DisconnectGithubUserInput!
  ): DisconnectGithubUserPayload

  """
  Disconnects a repository from a Workspace
  """
  disconnectWorkspaceRepository(
    """
    Parameters for DisconnectWorkspaceRepository
    """
    input: DisconnectWorkspaceRepositoryInput!
  ): DisconnectWorkspaceRepositoryPayload

  """
  Update the notion prompt dismissal status of a user
  """
  dismissConnectNotionPrompt(
    """
    Parameters for DismissConnectNotionPrompt
    """
    input: DismissConnectNotionPromptInput!
  ): DismissConnectNotionPromptPayload

  """
  Duplicates a Pipeline Automation
  """
  duplicatePipelineAutomation(
    """
    Parameters for DuplicatePipelineAutomation
    """
    input: DuplicatePipelineAutomationInput!
  ): DuplicatePipelineAutomationPayload

  """
  Generates sprint review
  """
  generateSprintReview(
    """
    Parameters for GenerateSprintReview
    """
    input: GenerateSprintReviewInput!
  ): GenerateSprintReviewPayload

  """
  Invite a list of users to estimate a list of issues. Errors on PR
  """
  inviteToEstimate(
    """
    Parameters for InviteToEstimate
    """
    input: InviteToEstimateInput!
  ): InviteToEstimatePayload

  """
  Leave zenhub organization
  """
  leaveZenhubOrganization(
    """
    Parameters for LeaveZenhubOrganization
    """
    input: LeaveZenhubOrganizationInput!
  ): LeaveZenhubOrganizationPayload

  """
  Migrate Zenhub metadata for repositories that were transferred to GitHub Enterprise
  """
  migrateGheTransferredRepository(
    """
    Parameters for MigrateGheTransferredRepository
    """
    input: MigrateGheTransferredRepositoryInput!
  ): MigrateGheTransferredRepositoryPayload

  """
  Move all pipeline issues from source pipelines to a destination pipeline
  """
  moveAllPipelineIssues(
    """
    Parameters for MoveAllPipelineIssues
    """
    input: MoveAllPipelineIssuesInput!
  ): MoveAllPipelineIssuesPayload

  """
  Move issues to a position in a pipeline
  """
  moveIssue(
    """
    Parameters for MoveIssue
    """
    input: MoveIssueInput!
  ): MoveIssuePayload

  """
  Move Issue after/before a PipelineIssue or to start/end
  """
  moveIssueRelativeTo(
    """
    Parameters for MoveIssueRelativeTo
    """
    input: MoveIssueRelativeToInput!
  ): MoveIssueRelativeToPayload

  """
  Move PipelineIssues to either top or bottom
  """
  movePipelineIssues(
    """
    Parameters for MovePipelineIssues
    """
    input: MovePipelineIssuesInput!
  ): MovePipelineIssuesPayload

  """
  Move roadmap items relative to each other
  """
  moveRoadmapItemRelativeTo(
    """
    Parameters for MoveRoadmapItemRelativeTo
    """
    input: MoveRoadmapItemRelativeToInput!
  ): MoveRoadmapItemRelativeToPayload

  """
  Moves a Zenhub issue to a different workspace
  """
  moveZenhubIssueToWorkspace(
    """
    Parameters for MoveZenhubIssueToWorkspace
    """
    input: MoveZenhubIssueToWorkspaceInput!
  ): MoveZenhubIssueToWorkspacePayload

  """
  Remove assignees from multiple Issues
  """
  removeAssigneesFromIssues(
    """
    Parameters for RemoveAssigneesFromIssues
    """
    input: RemoveAssigneesFromIssuesInput!
  ): RemoveAssigneesFromIssuesPayload

  """
  Remove assignees fromto multiple zenhub_epics
  """
  removeAssigneesFromZenhubEpics(
    """
    Parameters for RemoveAssigneesFromZenhubEpics
    """
    input: RemoveAssigneesFromZenhubEpicsInput!
  ): RemoveAssigneesFromZenhubEpicsPayload

  """
  Removes an Epic from a Project
  """
  removeEpicFromProject(
    """
    Parameters for RemoveEpicFromProject
    """
    input: RemoveEpicFromProjectInput!
  ): RemoveEpicFromProjectPayload
    @deprecated(
      reason: "This mutation must not be used. Use removeZenhubEpicsFromProject."
    )

  """
  Removes an Epic from a Roadmap
  """
  removeEpicFromRoadmap(
    """
    Parameters for RemoveEpicFromRoadmap
    """
    input: RemoveEpicFromRoadmapInput!
  ): RemoveEpicFromRoadmapPayload
    @deprecated(
      reason: "This mutation must not be used. Use removeZenhubEpicsFromRoadmap."
    )

  """
  Remove a value from an EstimateSet
  """
  removeEstimateSetValue(
    """
    Parameters for RemoveEstimateSetValue
    """
    input: RemoveEstimateSetValueInput!
  ): RemoveEstimateSetValuePayload

  """
  Remove a vote on issue estimation
  """
  removeEstimationVote(
    """
    Parameters for RemoveEstimationVote
    """
    input: RemoveEstimationVoteInput!
  ): RemoveEstimationVotePayload

  """
  Removes multiple issue priorities
  """
  removeIssueInfoPriorities(
    """
    Parameters for RemoveIssueInfoPriorities
    """
    input: RemoveIssueInfoPrioritiesInput!
  ): RemoveIssueInfoPrioritiesPayload

  """
  Remove Issues from Epics
  """
  removeIssuesFromEpics(
    """
    Parameters for RemoveIssuesFromEpics
    """
    input: RemoveIssuesFromEpicsInput!
  ): RemoveIssuesFromEpicsPayload
    @deprecated(
      reason: "This mutation must not be used. Use removeissuesFromZenhubEpics."
    )

  """
  Remove Issues from Releases
  """
  removeIssuesFromReleases(
    """
    Parameters for RemoveIssuesFromReleases
    """
    input: RemoveIssuesFromReleasesInput!
  ): RemoveIssuesFromReleasesPayload

  """
  Remove Issues from Sprints
  """
  removeIssuesFromSprints(
    """
    Parameters for RemoveIssuesFromSprints
    """
    input: RemoveIssuesFromSprintsInput!
  ): RemoveIssuesFromSprintsPayload

  """
  Remove Issues from Zenhub Epics
  """
  removeIssuesFromZenhubEpics(
    """
    Parameters for RemoveIssuesFromZenhubEpics
    """
    input: RemoveIssuesFromZenhubEpicsInput!
  ): RemoveIssuesFromZenhubEpicsPayload

  """
  Remove labels from multiple Issues
  """
  removeLabelsFromIssues(
    """
    Parameters for RemoveLabelsFromIssues
    """
    input: RemoveLabelsFromIssuesInput!
  ): RemoveLabelsFromIssuesPayload

  """
  Remove milestone from multiple Issues
  """
  removeMilestoneToIssues(
    """
    Parameters for RemoveMilestoneForIssues
    """
    input: RemoveMilestoneForIssuesInput!
  ): RemoveMilestoneForIssuesPayload

  """
  Remove a Project from a Roadmap
  """
  removeProjectFromRoadmap(
    """
    Parameters for RemoveProjectFromRoadmap
    """
    input: RemoveProjectFromRoadmapInput!
  ): RemoveProjectFromRoadmapPayload

  """
  Remove repositories from a release
  """
  removeRepositoriesFromRelease(
    """
    Parameters for RemoveRepositoriesFromRelease
    """
    input: RemoveRepositoriesFromReleaseInput!
  ): RemoveRepositoriesFromReleasePayload

  """
  Remove user from zenhub organization
  """
  removeUserFromZenhubOrganization(
    """
    Parameters for RemoveUserFromZenhubOrganization
    """
    input: RemoveUserFromZenhubOrganizationInput!
  ): RemoveUserFromZenhubOrganizationPayload

  """
  Removes label filters from a Workspace
  """
  removeWorkspaceLabelFilters(
    """
    Parameters for RemoveWorkspaceLabelFilters
    """
    input: RemoveWorkspaceLabelFiltersInput!
  ): RemoveWorkspaceLabelFiltersPayload

  """
  Remove zenhub users as assignees from multiple issues
  """
  removeZenhubAssigneesFromIssues(
    """
    Parameters for RemoveZenhubAssigneesFromIssues
    """
    input: RemoveZenhubAssigneesFromIssuesInput!
  ): RemoveZenhubAssigneesFromIssuesPayload

  """
  Removes a Zenhub Epic from a Project
  """
  removeZenhubEpicFromProject(
    """
    Parameters for RemoveZenhubEpicFromProject
    """
    input: RemoveZenhubEpicFromProjectInput!
  ): RemoveZenhubEpicFromProjectPayload

  """
  Remove Zenhub epic from a Roadmap
  """
  removeZenhubEpicFromRoadmap(
    """
    Parameters for RemoveZenhubEpicFromRoadmap
    """
    input: RemoveZenhubEpicFromRoadmapInput!
  ): RemoveZenhubEpicFromRoadmapPayload

  """
  Remove zenhub labels from multiple issues
  """
  removeZenhubLabelsFromIssues(
    """
    Parameters for RemoveZenhubLabelsFromIssues
    """
    input: RemoveZenhubLabelsFromIssuesInput!
  ): RemoveZenhubLabelsFromIssuesPayload

  """
  Remove zenhub labels from multiple zenhub epics
  """
  removeZenhubLabelsFromZenhubEpics(
    """
    Parameters for RemoveZenhubLabelsFromZenhubEpics
    """
    input: RemoveZenhubLabelsFromZenhubEpicsInput!
  ): RemoveZenhubLabelsFromZenhubEpicsPayload

  """
  Remove a ZenhubRepository from a Workspace
  """
  removeZenhubRepositoryFromWorkspace(
    """
    Parameters for RemoveZenhubRepositoryFromWorkspace
    """
    input: RemoveZenhubRepositoryFromWorkspaceInput!
  ): RemoveZenhubRepositoryFromWorkspacePayload

  """
  Remove Zenhub users from a workspace
  """
  removeZenhubUsersFromWorkspace(
    """
    Parameters for RemoveZenhubUsersFromWorkspace
    """
    input: RemoveZenhubUsersFromWorkspaceInput!
  ): RemoveZenhubUsersFromWorkspacePayload

  """
  Reopen Issues into a Pipeline either at the start or end
  """
  reopenIssues(
    """
    Parameters for ReopenIssues
    """
    input: ReopenIssuesInput!
  ): ReopenIssuesPayload

  """
  Set an estimate on an Issue
  """
  setEstimate(
    """
    Parameters for SetEstimate
    """
    input: SetEstimateInput!
  ): SetEstimatePayload

  """
  Give a vote on issue estimation
  """
  setEstimationVote(
    """
    Parameters for SetEstimationVote
    """
    input: SetEstimationVoteInput!
  ): SetEstimationVotePayload

  """
  Sets a workspace as favorite
  """
  setFavoriteWorkspace(
    """
    Parameters for SetFavoriteWorkspace
    """
    input: SetFavoriteWorkspaceInput!
  ): SetFavoriteWorkspacePayload

  """
  Sets multiple issue priorities
  """
  setIssueInfoPriorities(
    """
    Parameters for SetIssueInfoPriorities
    """
    input: SetIssueInfoPrioritiesInput!
  ): SetIssueInfoPrioritiesPayload

  """
  Set the start date on a milestone
  """
  setMilestoneStartDate(
    """
    Parameters for SetMilestoneStartDate
    """
    input: SetMilestoneStartDateInput!
  ): SetMilestoneStartDatePayload

  """
  Set estimates on multiple Issues
  """
  setMultipleEstimates(
    """
    Parameters for SetMultipleEstimates
    """
    input: SetMultipleEstimatesInput!
  ): SetMultipleEstimatesPayload

  """
  Set an estimate on ZenhubEpics
  """
  setMultipleEstimatesOnZenhubEpics(
    """
    Parameters for SetMultipleEstimatesOnZenhubEpics
    """
    input: SetMultipleEstimatesOnZenhubEpicsInput!
  ): SetMultipleEstimatesOnZenhubEpicsPayload

  """
  Set stages for pipelines
  """
  setPipelineStages(
    """
    Parameters for SetPipelineStages
    """
    input: SetPipelineStagesInput!
  ): SetPipelineStagesPayload

  """
  Set priority on PipelineIssues
  """
  setPriorityOnPipelineIssues(
    """
    Parameters for SetPriorityOnPipelineIssues
    """
    input: SetPriorityOnPipelineIssuesInput!
  ): SetPriorityOnPipelineIssuesPayload

  """
  Sets a pull_request_pipeline_id for a workspace
  """
  setPullRequestPipeline(
    """
    Parameters for SetPullRequestPipeline
    """
    input: SetPullRequestPipelineInput!
  ): SetPullRequestPipelinePayload

  """
  For a user, set Workspace's last viewed timestamp to now
  """
  setWorkspaceViewedNow(
    """
    Parameters for SetWorkspaceViewedNow
    """
    input: SetWorkspaceViewedNowInput!
  ): SetWorkspaceViewedNowPayload

  """
  Splits a repository from a Workspace
  """
  splitWorkspaceRepository(
    """
    Parameters for SplitWorkspaceRepository
    """
    input: SplitWorkspaceRepositoryInput!
  ): SplitWorkspaceRepositoryPayload

  """
  Updates comment
  """
  updateComment(
    """
    Parameters for UpdateComment
    """
    input: UpdateCommentInput!
  ): UpdateCommentPayload

  """
  Update epic's startOn and endOn dates
  """
  updateEpicDates(
    """
    Parameters for UpdateEpicDates
    """
    input: UpdateEpicDatesInput!
  ): UpdateEpicDatesPayload
    @deprecated(
      reason: "This mutation must not be used. Use updateZenhubEpicDates."
    )

  """
  Adds and Removes Issues from an Epic
  """
  updateEpicIssuesByIssueInfos(
    """
    Parameters for UpdateEpicIssuesByIssueInfos
    """
    input: UpdateEpicIssuesByIssueInfosInput!
  ): UpdateEpicIssuesByIssueInfosPayload
    @deprecated(reason: "This mutation must not be used. Use updateZenhubEpic.")

  """
  Update an existing Issue
  """
  updateIssue(
    """
    Parameters for UpdateIssue
    """
    input: UpdateIssueInput!
  ): UpdateIssuePayload

  """
  Update a Pipeline
  """
  updatePipeline(
    """
    Parameters for UpdatePipeline
    """
    input: UpdatePipelineInput!
  ): UpdatePipelinePayload

  """
  Updates a Pipeline Automation
  """
  updatePipelineAutomation(
    """
    Parameters for UpdatePipelineAutomation
    """
    input: UpdatePipelineAutomationInput!
  ): UpdatePipelineAutomationPayload

  """
  Updates a Pipeline Configuration
  """
  updatePipelineConfiguration(
    """
    Parameters for UpdatePipelineConfiguration
    """
    input: UpdatePipelineConfigurationInput!
  ): UpdatePipelineConfigurationPayload

  """
  Update a Project
  """
  updateProject(
    """
    Parameters for UpdateProject
    """
    input: UpdateProjectInput!
  ): UpdateProjectPayload

  """
  Update Project's startOn and endOn dates
  """
  updateProjectDates(
    """
    Parameters for UpdateProjectDates
    """
    input: UpdateProjectDatesInput!
  ): UpdateProjectDatesPayload

  """
  Update a Project State
  """
  updateProjectState(
    """
    Parameters for UpdateProjectState
    """
    input: UpdateProjectStateInput!
  ): UpdateProjectStatePayload

  """
  Update a release
  """
  updateRelease(
    """
    Parameters for UpdateRelease
    """
    input: UpdateReleaseInput!
  ): UpdateReleasePayload

  """
  Update a key date from the roadmap
  """
  updateRoadmapKeyDate(
    """
    Parameters for UpdateRoadmapKeyDate
    """
    input: UpdateRoadmapKeyDateInput!
  ): UpdateRoadmapKeyDatePayload

  """
  Update filters or name of a saved view
  """
  updateSavedView(
    """
    Parameters for UpdateSavedView
    """
    input: UpdateSavedViewInput!
  ): UpdateSavedViewPayload

  """
  Update an existing Sprint
  """
  updateSprint(
    """
    Parameters for UpdateSprint
    """
    input: UpdateSprintInput!
  ): UpdateSprintPayload

  """
  Updates a SprintConfig for a workspace
  """
  updateSprintConfig(
    """
    Parameters for UpdateSprintConfig
    """
    input: UpdateSprintConfigInput!
  ): UpdateSprintConfigPayload

  """
  Update user permissions on organization
  """
  updateUserPermissions(
    """
    Parameters for UpdateUserPermissions
    """
    input: UpdateUserPermissionsInput!
  ): UpdateUserPermissionsPayload

  """
  Update a Workspace
  """
  updateWorkspace(
    """
    Parameters for UpdateWorkspace
    """
    input: UpdateWorkspaceInput!
  ): UpdateWorkspacePayload

  """
  Update the role and add user to workspace if needed
  """
  updateWorkspaceZenhubUserRole(
    """
    Parameters for UpdateWorkspaceZenhubUserRole
    """
    input: UpdateWorkspaceZenhubUserRoleInput!
  ): UpdateWorkspaceZenhubUserRolePayload

  """
  Update Zenhub epic
  """
  updateZenhubEpic(
    """
    Parameters for UpdateZenhubEpic
    """
    input: UpdateZenhubEpicInput!
  ): UpdateZenhubEpicPayload

  """
  Update Zenhub epic's startOn and endOn dates
  """
  updateZenhubEpicDates(
    """
    Parameters for UpdateZenhubEpicDates
    """
    input: UpdateZenhubEpicDatesInput!
  ): UpdateZenhubEpicDatesPayload

  """
  Update a key date from a Zenhub Epic
  """
  updateZenhubEpicKeyDate(
    """
    Parameters for UpdateZenhubEpicKeyDate
    """
    input: UpdateZenhubEpicKeyDateInput!
  ): UpdateZenhubEpicKeyDatePayload

  """
  Update a ZenhubEpic State
  """
  updateZenhubEpicState(
    """
    Parameters for UpdateZenhubEpicState
    """
    input: UpdateZenhubEpicStateInput!
  ): UpdateZenhubEpicStatePayload

  """
  Update ZenhubOrganization
  """
  updateZenhubOrganization(
    """
    Parameters for UpdateZenhubOrganization
    """
    input: UpdateZenhubOrganizationInput!
  ): UpdateZenhubOrganizationPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

type NoOwner implements Owner {
  avatarUrl: String!
  createdAt: ISO8601DateTime!
  ghId: Int
  hasWorkspace: Boolean!
  id: ID!
  login: String!
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection!

  """
  Repositories favorited by this github user
  """
  repositoryFavorites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryFavoriteConnection!
  roadmapItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    state: RoadmapItemStateFilterInput
  ): RoadmapItemConnection!
  searchWorkspaces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String!
    repositoryGhIds: [Int!]
  ): WorkspaceSearchMatchConnection!
  type: String!
  updatedAt: ISO8601DateTime!
  workspaceFavorites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkspaceFavoriteConnection!
}

enum OrderDirection {
  ASC
  DESC
}

"""
Cached Github organization data. Is inherited from OwnerType.
"""
type Organization implements Owner & Timestamps {
  avatarUrl: String!
  createdAt: ISO8601DateTime!
  ghId: Int
  hasWorkspace: Boolean!
  id: ID!
  login: String!
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection!

  """
  Repositories favorited by this github user
  """
  repositoryFavorites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryFavoriteConnection!
  roadmapItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    state: RoadmapItemStateFilterInput
  ): RoadmapItemConnection!
  searchWorkspaces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String!
    repositoryGhIds: [Int!]
  ): WorkspaceSearchMatchConnection!
  type: String!
  updatedAt: ISO8601DateTime!
  workspaceFavorites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkspaceFavoriteConnection!
  zenhubOrganization: ZenhubOrganization
}

"""
Cached Github data for user or organization
"""
interface Owner {
  avatarUrl: String!
  createdAt: ISO8601DateTime!
  ghId: Int
  hasWorkspace: Boolean!
  id: ID!
  login: String!
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection!

  """
  Repositories favorited by this github user
  """
  repositoryFavorites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryFavoriteConnection!
  roadmapItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    state: RoadmapItemStateFilterInput
  ): RoadmapItemConnection!
  searchWorkspaces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String!
    repositoryGhIds: [Int!]
  ): WorkspaceSearchMatchConnection!
  type: String!
  updatedAt: ISO8601DateTime!
  workspaceFavorites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkspaceFavoriteConnection!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

enum PermissionLevel {
  NONE
  READ
  ZENHUB_WRITE
  WRITE
  ADMIN
}

"""
Board column object.
"""
type Pipeline implements Node & Timestamps {
  createdAt: ISO8601DateTime!
  description: String
  hasEstimatedIssues: Boolean!
  id: ID!

  """
  Whether the pipeline is a default for new PRs
  """
  isDefaultPRPipeline: Boolean!
  isEpicPipeline: Boolean! @deprecated(reason: "This field must not be used.")
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    repositoryId: ID
    state: IssueState
  ): IssueConnection!
  itemBefore: Pipeline
  name: String!
  pipelineConfiguration: PipelineConfiguration!
  pipelineToPipelineAutomationDestinations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PipelineToPipelineAutomationConnection!
  pipelineToPipelineAutomationSources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PipelineToPipelineAutomationConnection!
  stage: PipelineStage
  updatedAt: ISO8601DateTime!
  workspace: Workspace!
}

"""
Pipeline automation column object.
"""
type PipelineAutomation implements Timestamps {
  createdAt: ISO8601DateTime!

  """
  Possible values: for labels: { labels: [{ name:, color:}, { name:, color:}] }.
  For assignees: { assignees: [user1_eid, user2_eid] }. To remove all assignees
  pass empty array { assignees: [] }. For sprints: { sprints: [sprint1_eid,
  sprint2_eid] }. For epics: { epics: [epic1_eid, epic2_eid] }. For zenhub
  epics: { zenhubEpics: [epic1_eid, epic2_eid] }. For relative sprints: {
  relativeSprints: [0, 1, 2] }, where numbers are index of sprints from the
  current sprint. To remove all sprints pass empty array { relativeSprints: []
  }. for pipelines: { pipelines: [pipeline1_eid, pipeline2_eid] }
  """
  elementDetails: JSON!
  id: ID!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for PipelineAutomation.
"""
type PipelineAutomationConnection {
  """
  A list of edges.
  """
  edges: [PipelineAutomationEdge!]!

  """
  A list of nodes.
  """
  nodes: [PipelineAutomation!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PipelineAutomationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PipelineAutomation!
}

input PipelineConfigInput {
  name: String!
  description: String
  stage: PipelineStage
}

"""
Pipeline configurations column object.
"""
type PipelineConfiguration implements Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  pipelineAutomations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PipelineAutomationConnection!

  """
  Stale interval in days.
  """
  staleInterval: Int
  staleIssues: Boolean
  updatedAt: ISO8601DateTime!
  wipLimits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WipLimitConnection!
}

"""
The connection type for Pipeline.
"""
type PipelineConnection {
  """
  A list of edges.
  """
  edges: [PipelineEdge!]!

  """
  A list of nodes.
  """
  nodes: [Pipeline!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type PipelineCounts {
  issuesCount: Int!
  pullRequestsCount: Int!
  sumEstimates: Float!
  unfilteredIssueCount: Int
  unfilteredSumEstimates: Float
}

"""
An edge in a connection.
"""
type PipelineEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Pipeline!
}

"""
Position of an issue in a pipeline
"""
type PipelineIssue {
  id: ID!
  issue: Issue!
  itemAfter: PipelineIssue
  itemBefore: PipelineIssue
  latestTransferTime: ISO8601DateTime
  pipeline: Pipeline!
  priority: Priority
  relativePosition: BigInt!
  workspace: Workspace!
}

"""
The connection type for PipelineIssue.
"""
type PipelineIssueConnection {
  """
  A list of edges.
  """
  edges: [PipelineIssueEdge!]!

  """
  A list of nodes.
  """
  nodes: [PipelineIssue!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PipelineIssueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PipelineIssue!
}

type PipelineIssueMove {
  movedAt: Float!
  pipelineIssue: PipelineIssue!
  sourcePipelineId: ID
}

enum PipelineIssuePosition {
  START
  END
}

enum PipelineStage {
  BACKLOG
  SPRINT_BACKLOG
  DEVELOPMENT
  REVIEW
  COMPLETED
}

"""
Automatic issue movement between pipelines
"""
type PipelineToPipelineAutomation implements Node & Timestamps {
  createdAt: ISO8601DateTime!
  destinationPipeline: Pipeline!
  id: ID!
  sourcePipeline: Pipeline!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for PipelineToPipelineAutomation.
"""
type PipelineToPipelineAutomationConnection {
  """
  A list of edges.
  """
  edges: [PipelineToPipelineAutomationEdge!]!

  """
  A list of nodes.
  """
  nodes: [PipelineToPipelineAutomation!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PipelineToPipelineAutomationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PipelineToPipelineAutomation!
}

type Priority implements Timestamps {
  color: String!
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Priority.
"""
type PriorityConnection {
  """
  A list of edges.
  """
  edges: [PriorityEdge!]!

  """
  A list of nodes.
  """
  nodes: [Priority!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PriorityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Priority!
}

type Project implements IssueProgress & Node & RoadmapItemDates & Timestamps & ViewerPermission & ZenhubEpicIssueProgress {
  closedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  creator: ZenhubUser
  description: String
  endOn(roadmapId: ID): ISO8601Date
  epics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    state: IssueStateFilterInput
    order: RoadmapItemOrderInput
    query: String
  ): EpicConnection!
    @deprecated(reason: "This field must not be used. Use zenhubEpics.")
  htmlBody: String
  id: ID!
  issueCountProgress: IssueCountProgress
  issueEstimateProgress: IssueEstimateProgress
  name: String!
  startOn(roadmapId: ID): ISO8601Date
  state: ProjectState!
  updatedAt: ISO8601DateTime!
  viewerAbilities: ProjectAbilities!
  viewerPermission: PermissionLevel!
  zenhubEpics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    state: ZenhubEpicStateFilterInput
    order: RoadmapItemOrderInput
    query: String
  ): ZenhubEpicConnection!
  zenhubIssueCountProgress: IssueCountProgress
  zenhubIssueEstimateProgress: IssueEstimateProgress
}

type ProjectAbilities {
  closeAllEpics: Boolean!
  scaleDates: Boolean!
  shiftDates: Boolean!
}

"""
The connection type for Project.
"""
type ProjectConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge!]!

  """
  A list of nodes.
  """
  nodes: [Project!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

enum ProjectDateAction {
  SHIFT
  SCALE
  RESET
}

"""
An edge in a connection.
"""
type ProjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Project!
}

input ProjectInput {
  name: String!
  description: String
}

enum ProjectState {
  OPEN
  CLOSED
}

type PullRequest implements GithubTimestamps & Timestamps {
  createdAt: ISO8601DateTime!
  draft: Boolean!
  ghCreatedAt: ISO8601DateTime!
  ghUpdatedAt: ISO8601DateTime!
  id: ID!
  issue: Issue!
  state: PullRequestState!
  updatedAt: ISO8601DateTime!
}

type PullRequestReview implements GithubTimestamps & Timestamps {
  createdAt: ISO8601DateTime!
  ghCreatedAt: ISO8601DateTime!
  ghId: Int!
  ghNodeId: ID!
  ghUpdatedAt: ISO8601DateTime!
  id: ID!
  state: PullRequestReviewState!
  submittedAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
  user: Owner
}

"""
The connection type for PullRequestReview.
"""
type PullRequestReviewConnection {
  """
  A list of edges.
  """
  edges: [PullRequestReviewEdge!]!

  """
  A list of nodes.
  """
  nodes: [PullRequestReview!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PullRequestReviewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PullRequestReview!
}

enum PullRequestReviewState {
  APPROVED
  CHANGES_REQUESTED
  COMMENTED
  DISMISSED
}

enum PullRequestState {
  CLOSED
  MERGED
  OPEN
}

type Query {
  """
  Lookup an Issue by repository_gh_id or repository_id  and issue_number
  """
  issueByInfo(repositoryGhId: Int, repositoryId: ID, issueNumber: Int!): Issue!

  """
  A concatenated list of all issues connected to any
             of the given issues in the passed workspace
  """
  issueConnections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    workspaceId: ID!
    issueIds: [ID!]!
  ): IssueConnection!
  milestoneByRepoGhIdAndNumber(
    repositoryGhId: Int!
    milestoneNumber: Int!
  ): Milestone!

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!

  """
  Lookup an Owner by GitHub database ID
  """
  ownerByGhId(ghId: Int!): Owner

  """
  Lookup an Owner by GitHub login
  """
  ownerByLogin(login: String!): Owner

  """
  preview sprint config schedules
  """
  previewSprintConfig(
    startOn: ISO8601Date!
    endOn: ISO8601Date!
    kind: SprintConfigKind
    tzIdentifier: String!
    workspaceId: ID
  ): SprintConfigPreview

  """
  User's recently viewed Workspaces
  """
  recentlyViewedWorkspaces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    repositoryGhIds: [ID!]
    zenhubOrganizationId: ID
  ): WorkspaceConnection!

  """
  Lookup repositories by their GitHub ID
  """
  repositoriesByGhId(ghIds: [Int!]!): [Repository!]!

  """
  Search and filter closed issues per pipeline
  """
  searchClosedIssues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    workspaceId: ID!
    query: String
    filters: IssueSearchFiltersInput!
  ): IssueConnection

  """
  Search and filter issues inside repository
  """
  searchIssues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    workspaceId: ID!
    epicIssueByInfo: EpicIssueByInfoInput
    filters: EpicAssignableIssueSearchFiltersInput!
    query: String
    includeClosed: Boolean
  ): IssueConnection

  """
  Search and filter issues per pipeline
  """
  searchIssuesByPipeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    pipelineId: ID!
    query: String
    order: IssueOrderInput
    filters: IssueSearchFiltersInput!
  ): IssueConnection

  """
  Search and filter issues inside zenhub epics
  """
  searchIssuesByZenhubEpics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    filters: ZenhubEpicIssueSearchFiltersInput!
    zenhubEpicIds: [ID!]!
  ): IssueConnection

  """
  PipelineToPipelineAutomation records that are triggered when an issue moves into a Pipeline
  """
  triggeredPipelineToPipelineAutomations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    issue: IssueInfoInput!
    pipelineId: ID!
  ): PipelineToPipelineAutomationConnection!

  """
  Validate a workspace name within a zorg
  """
  validateWorkspaceName(zenhubOrganizationId: ID!, name: String!): Boolean!

  """
  Return the current zenhub user
  """
  viewer: ZenhubUser!

  """
  Lookup Workspace by its ID
  """
  workspace(id: ID!): Workspace
}

type Release implements Node & Timestamps & ViewerPermission {
  closedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  description: String
  endOn: ISO8601Date
  id: ID!
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection!
  issuesCount: Int!
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryConnection!
  startOn: ISO8601Date
  state: ReleaseState!
  title: String!
  updatedAt: ISO8601DateTime!
  viewerPermission: PermissionLevel!
}

"""
The connection type for Release.
"""
type ReleaseConnection {
  """
  A list of edges.
  """
  edges: [ReleaseEdge!]!

  """
  A list of nodes.
  """
  nodes: [Release!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

input ReleaseCreateInput {
  title: String!
  description: String
  startOn: ISO8601Date!
  endOn: ISO8601Date!
  repositoryGhIds: [Int!]!
}

"""
An edge in a connection.
"""
type ReleaseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Release!
}

enum ReleaseState {
  OPEN
  CLOSED
}

"""
Filter by ReleaseState
"""
input ReleaseStateInput {
  eq: ReleaseState!
}

input ReleaseUpdateInput {
  title: String
  description: String
  state: ReleaseState
  startOn: ISO8601Date
  endOn: ISO8601Date
}

"""
Autogenerated input type of RemoveAssigneesFromIssues
"""
input RemoveAssigneesFromIssuesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
  assigneeIds: [ID!]!
}

"""
Autogenerated return type of RemoveAssigneesFromIssues.
"""
type RemoveAssigneesFromIssuesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  successCount: Int!
}

"""
Autogenerated input type of RemoveAssigneesFromZenhubEpics
"""
input RemoveAssigneesFromZenhubEpicsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  assigneeIds: [ID!]!
  zenhubEpicIds: [ID!]!
}

"""
Autogenerated return type of RemoveAssigneesFromZenhubEpics.
"""
type RemoveAssigneesFromZenhubEpicsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpics: [ZenhubEpic!]!
}

"""
Autogenerated input type of RemoveEpicFromProject
"""
input RemoveEpicFromProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  projectId: ID!
  epicId: ID!
}

"""
Autogenerated return type of RemoveEpicFromProject.
"""
type RemoveEpicFromProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  epic: Epic!
  project: Project!
}

"""
Autogenerated input type of RemoveEpicFromRoadmap
"""
input RemoveEpicFromRoadmapInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  roadmapId: ID!
  epicId: ID!
}

"""
Autogenerated return type of RemoveEpicFromRoadmap.
"""
type RemoveEpicFromRoadmapPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  epic: Epic!
  roadmap: Roadmap!
}

"""
Autogenerated input type of RemoveEstimateSetValue
"""
input RemoveEstimateSetValueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  repositoryId: ID
  value: Float!
}

"""
Autogenerated return type of RemoveEstimateSetValue.
"""
type RemoveEstimateSetValuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  estimateSet: EstimateSet!
}

"""
Autogenerated input type of RemoveEstimationVote
"""
input RemoveEstimationVoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  estimationVoteId: ID!
}

"""
Autogenerated return type of RemoveEstimationVote.
"""
type RemoveEstimationVotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  estimationVote: EstimationVote!
}

"""
Autogenerated input type of RemoveIssueInfoPriorities
"""
input RemoveIssueInfoPrioritiesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceId: ID!
  issues: [IssueInfoInput!]!
}

"""
Autogenerated return type of RemoveIssueInfoPriorities.
"""
type RemoveIssueInfoPrioritiesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineIssues: [PipelineIssue!]!
}

"""
Autogenerated input type of RemoveIssuesFromEpics
"""
input RemoveIssuesFromEpicsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
  epicIds: [ID!]!
}

"""
Autogenerated return type of RemoveIssuesFromEpics.
"""
type RemoveIssuesFromEpicsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  epics: [Epic!]!
}

"""
Autogenerated input type of RemoveIssuesFromReleases
"""
input RemoveIssuesFromReleasesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
  releaseIds: [ID!]!
}

"""
Autogenerated return type of RemoveIssuesFromReleases.
"""
type RemoveIssuesFromReleasesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  releases: [Release!]!
}

"""
Autogenerated input type of RemoveIssuesFromSprints
"""
input RemoveIssuesFromSprintsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
  sprintIds: [ID!]!
}

"""
Autogenerated return type of RemoveIssuesFromSprints.
"""
type RemoveIssuesFromSprintsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  sprints: [Sprint!]!
}

"""
Autogenerated input type of RemoveIssuesFromZenhubEpics
"""
input RemoveIssuesFromZenhubEpicsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
  zenhubEpicIds: [ID!]!
}

"""
Autogenerated return type of RemoveIssuesFromZenhubEpics.
"""
type RemoveIssuesFromZenhubEpicsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpics: [ZenhubEpic!]!
}

"""
Autogenerated input type of RemoveLabelsFromIssues
"""
input RemoveLabelsFromIssuesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!

  """
  One of two label arguments is required
  """
  labelIds: [ID!]

  """
  One of two label arguments is required
  """
  labelInfos: [LabelInfoInput!]
}

"""
Autogenerated return type of RemoveLabelsFromIssues.
"""
type RemoveLabelsFromIssuesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  labels: [Label!]!
  successCount: Int!
}

"""
Autogenerated input type of RemoveMilestoneForIssues
"""
input RemoveMilestoneForIssuesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
}

"""
Autogenerated return type of RemoveMilestoneForIssues.
"""
type RemoveMilestoneForIssuesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  successCount: Int!
}

"""
Autogenerated input type of RemoveProjectFromRoadmap
"""
input RemoveProjectFromRoadmapInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  roadmapId: ID!
  projectId: ID!
}

"""
Autogenerated return type of RemoveProjectFromRoadmap.
"""
type RemoveProjectFromRoadmapPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  project: Project!
  projectDeleted: Boolean!
  roadmap: Roadmap!
}

"""
Autogenerated input type of RemoveRepositoriesFromRelease
"""
input RemoveRepositoriesFromReleaseInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  repositoryGhIds: [Int!]!
  releaseId: ID!
}

"""
Autogenerated return type of RemoveRepositoriesFromRelease.
"""
type RemoveRepositoriesFromReleasePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  release: Release!
}

"""
Autogenerated input type of RemoveUserFromZenhubOrganization
"""
input RemoveUserFromZenhubOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubOrganizationId: ID!
  zenhubUserId: ID!
}

"""
Autogenerated return type of RemoveUserFromZenhubOrganization.
"""
type RemoveUserFromZenhubOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubOrganization: ZenhubOrganization!
}

"""
Autogenerated input type of RemoveWorkspaceLabelFilters
"""
input RemoveWorkspaceLabelFiltersInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceLabelFiltersIds: [ID!]!
}

"""
Autogenerated return type of RemoveWorkspaceLabelFilters.
"""
type RemoveWorkspaceLabelFiltersPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  deleted workspace label filters
  """
  workspaceLabelFilters: [WorkspaceLabelFilter!]!
}

"""
Autogenerated input type of RemoveZenhubAssigneesFromIssues
"""
input RemoveZenhubAssigneesFromIssuesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
  zenhubUserIds: [ID!]!
}

"""
Autogenerated return type of RemoveZenhubAssigneesFromIssues.
"""
type RemoveZenhubAssigneesFromIssuesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issues: [Issue!]!
}

"""
Autogenerated input type of RemoveZenhubEpicFromProject
"""
input RemoveZenhubEpicFromProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  projectId: ID!
  zenhubEpicId: ID!
}

"""
Autogenerated return type of RemoveZenhubEpicFromProject.
"""
type RemoveZenhubEpicFromProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  project: Project!
  zenhubEpic: ZenhubEpic!
}

"""
Autogenerated input type of RemoveZenhubEpicFromRoadmap
"""
input RemoveZenhubEpicFromRoadmapInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  roadmapId: ID!
  zenhubEpicId: ID!
  force: Boolean
}

"""
Autogenerated return type of RemoveZenhubEpicFromRoadmap.
"""
type RemoveZenhubEpicFromRoadmapPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  roadmap: Roadmap!
  zenhubEpic: ZenhubEpic!
  zenhubEpicDeleted: Boolean!
}

"""
Autogenerated input type of RemoveZenhubLabelsFromIssues
"""
input RemoveZenhubLabelsFromIssuesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
  zenhubLabelIds: [ID!]
  labelInfos: [LabelInfoInput!]
}

"""
Autogenerated return type of RemoveZenhubLabelsFromIssues.
"""
type RemoveZenhubLabelsFromIssuesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issues: [Issue!]!
}

"""
Autogenerated input type of RemoveZenhubLabelsFromZenhubEpics
"""
input RemoveZenhubLabelsFromZenhubEpicsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpicIds: [ID!]!
  zenhubLabelIds: [ID!]
  labelInfos: [LabelInfoInput!]
}

"""
Autogenerated return type of RemoveZenhubLabelsFromZenhubEpics.
"""
type RemoveZenhubLabelsFromZenhubEpicsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpics: [ZenhubEpic!]!
}

"""
Autogenerated input type of RemoveZenhubRepositoryFromWorkspace
"""
input RemoveZenhubRepositoryFromWorkspaceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceId: ID!
  repositoryId: ID!
}

"""
Autogenerated return type of RemoveZenhubRepositoryFromWorkspace.
"""
type RemoveZenhubRepositoryFromWorkspacePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspace: Workspace!
}

"""
Autogenerated input type of RemoveZenhubUsersFromWorkspace
"""
input RemoveZenhubUsersFromWorkspaceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubUserIds: [ID!]!
  workspaceId: ID!
}

"""
Autogenerated return type of RemoveZenhubUsersFromWorkspace.
"""
type RemoveZenhubUsersFromWorkspacePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspace: Workspace!
  zenhubUsers: [ZenhubUser!]!
}

"""
Autogenerated input type of ReopenIssues
"""
input ReopenIssuesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
  pipelineId: ID!
  position: PipelineIssuePosition!
}

"""
Autogenerated return type of ReopenIssues.
"""
type ReopenIssuesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  successCount: Int!
}

type Repository implements GithubTimestamps & Node & Timestamps {
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String
  ): UserConnection!
  createdAt: ISO8601DateTime!
  description: String
  estimateSet: EstimateSet!
  ghCreatedAt: ISO8601DateTime!
  ghId: Int!
  ghNodeId: ID
  ghUpdatedAt: ISO8601DateTime!
  id: ID!
  import: RepositoryImport!
  isArchived: Boolean!

  """
  Whether the repository was favorited by the current user
  """
  isFavorite: Boolean!
  isPrivate: Boolean!
  issueTemplates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueTemplateConnection!
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection!
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection!
  milestones(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MilestoneConnection!
  name: String!
  owner: Owner!
  ownerName: String!
  permissions: RepositoryPermission!
  releases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReleaseConnection!

  """
  Defines the type of the repository - either cache of Github data or Zenhub repository
  """
  type: RepositoryType!
  updatedAt: ISO8601DateTime!

  """
  Only for ZenhubRepository. Returns the workspace this repository belongs to
  """
  workspace: Workspace
  workspaces: [Workspace!]!
    @deprecated(reason: "Use `Repository.workspaces_connection`.")
  workspacesConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkspaceConnection!
}

"""
The connection type for Repository.
"""
type RepositoryConnection {
  """
  A list of edges.
  """
  edges: [RepositoryEdge!]!

  """
  A list of nodes.
  """
  nodes: [Repository!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Repository!
}

type RepositoryFavorite implements Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  repository: Repository!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for RepositoryFavorite.
"""
type RepositoryFavoriteConnection {
  """
  A list of edges.
  """
  edges: [RepositoryFavoriteEdge!]!

  """
  A list of nodes.
  """
  nodes: [RepositoryFavorite!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryFavoriteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryFavorite!
}

"""
Stores Github project import information
"""
type RepositoryGithubProjectImport {
  ghProjectId: String!
  ghProjectName: String
  id: ID!
  pipelines(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PipelineConnection!
  repository: Repository!
}

"""
Stores information about a repository import state
"""
type RepositoryImport implements Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  resources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryImportResourceConnection!
  state: RepositoryImportState!
  updatedAt: ISO8601DateTime!
}

type RepositoryImportResource implements Timestamps {
  completedAt: ISO8601DateTime
  completedPages: Int
  createdAt: ISO8601DateTime!
  id: ID!
  kind: RepositoryImportResourceKind!
  startedAt: ISO8601DateTime
  state: RepositoryImportResourceState!
  totalPages: Int
  updatedAt: ISO8601DateTime!
}

"""
The connection type for RepositoryImportResource.
"""
type RepositoryImportResourceConnection {
  """
  A list of edges.
  """
  edges: [RepositoryImportResourceEdge!]!

  """
  A list of nodes.
  """
  nodes: [RepositoryImportResource!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryImportResourceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryImportResource!
}

enum RepositoryImportResourceKind {
  OPEN_ISSUES
  CLOSED_ISSUES
}

enum RepositoryImportResourceState {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum RepositoryImportState {
  PENDING
  IN_PROGRESS
  USABLE
  COMPLETED
}

type RepositoryMatch {
  matchedRepositories: [Repository!]!
  workspace: Workspace!
}

type RepositoryPermission {
  admin: Boolean!
  pull: Boolean!
  push: Boolean!
}

enum RepositoryType {
  GithubRepository
  ZenhubRepository
}

union Reviewer = User

type ReviewRequest implements Timestamps {
  createdAt: ISO8601DateTime!
  ghId: Int!
  ghNodeId: ID!
  id: ID!
  reviewer: Reviewer
  updatedAt: ISO8601DateTime!
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge!]!

  """
  A list of nodes.
  """
  nodes: [ReviewRequest!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest!
}

type Roadmap implements Node & Timestamps & ViewerPermission {
  createdAt: ISO8601DateTime!
  id: ID!
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    order: RoadmapItemOrderInput
    state: RoadmapItemStateFilterInput
    query: String
    startOn: ISO8601Date
    endOn: ISO8601Date
  ): RoadmapItemConnection!
  keyDates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    startDate: ISO8601Date
    endDate: ISO8601Date
  ): KeyDateConnection
  updatedAt: ISO8601DateTime!
  viewerPermission: PermissionLevel!
  workspace: Workspace!
}

union RoadmapItem = Epic | Project | ZenhubEpic

"""
The connection type for RoadmapItem.
"""
type RoadmapItemConnection {
  """
  A list of edges.
  """
  edges: [RoadmapItemEdge!]!

  """
  A list of nodes.
  """
  nodes: [RoadmapItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

interface RoadmapItemDates {
  endOn(roadmapId: ID): ISO8601Date
  startOn(roadmapId: ID): ISO8601Date
}

"""
An edge in a connection.
"""
type RoadmapItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RoadmapItem
}

enum RoadmapItemOrderField {
  """
  Order by item start_on
  """
  start_on

  """
  Order by item end_on
  """
  end_on
}

"""
Sort roadmap items
"""
input RoadmapItemOrderInput {
  field: RoadmapItemOrderField!
  direction: OrderDirection!
}

enum RoadmapItemState {
  OPEN
  TODO
  IN_PROGRESS
  CLOSED
}

"""
Filter for RoadmapItem state
"""
input RoadmapItemStateFilterInput {
  in: [RoadmapItemState!]
  nin: [RoadmapItemState!]
}

"""
Possible roles of Zenhub users at organization
"""
enum Roles {
  MEMBER
  ADMIN
  EXTERNAL_READER
  EXTERNAL_WRITER
}

"""
A set of filters saved by a user for later use
"""
type SavedView implements Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
The connection type for SavedView.
"""
type SavedViewConnection {
  """
  A list of edges.
  """
  edges: [SavedViewEdge!]!

  """
  A list of nodes.
  """
  nodes: [SavedView!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedViewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedView!
}

type ScopeChange {
  action: BucketIssueHistoryAction!
  effectiveAt: ISO8601DateTime!
  estimateValue: Float
  issue: Issue!
}

"""
The connection type for ScopeChange.
"""
type ScopeChangeConnection {
  """
  A list of edges.
  """
  edges: [ScopeChangeEdge!]!

  """
  A list of nodes.
  """
  nodes: [ScopeChange!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ScopeChangeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ScopeChange!
}

"""
Autogenerated input type of SetEstimate
"""
input SetEstimateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  value: Float
  issueId: ID!
}

"""
Autogenerated return type of SetEstimate.
"""
type SetEstimatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issue: Issue!
}

"""
Autogenerated input type of SetEstimationVote
"""
input SetEstimationVoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  estimationVoteId: ID!
  value: Float
}

"""
Autogenerated return type of SetEstimationVote.
"""
type SetEstimationVotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  estimationVote: EstimationVote!
}

"""
Autogenerated input type of SetFavoriteWorkspace
"""
input SetFavoriteWorkspaceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceId: ID!
}

"""
Autogenerated return type of SetFavoriteWorkspace.
"""
type SetFavoriteWorkspacePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceFavorite: WorkspaceFavorite!
}

"""
Autogenerated input type of SetIssueInfoPriorities
"""
input SetIssueInfoPrioritiesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  priorityId: ID!
  issues: [IssueInfoInput!]!
}

"""
Autogenerated return type of SetIssueInfoPriorities.
"""
type SetIssueInfoPrioritiesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineIssues: [PipelineIssue!]!
}

"""
Autogenerated input type of SetMilestoneStartDate
"""
input SetMilestoneStartDateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  milestoneId: ID!
  startDate: ISO8601DateTime
}

"""
Autogenerated return type of SetMilestoneStartDate.
"""
type SetMilestoneStartDatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  milestone: Milestone!
}

"""
Autogenerated input type of SetMultipleEstimates
"""
input SetMultipleEstimatesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issueIds: [ID!]!
  value: Float
}

"""
Autogenerated input type of SetMultipleEstimatesOnZenhubEpics
"""
input SetMultipleEstimatesOnZenhubEpicsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpicIds: [ID!]!
  value: Float
}

"""
Autogenerated return type of SetMultipleEstimatesOnZenhubEpics.
"""
type SetMultipleEstimatesOnZenhubEpicsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpics: [ZenhubEpic!]!
}

"""
Autogenerated return type of SetMultipleEstimates.
"""
type SetMultipleEstimatesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issues: [Issue!]!
}

"""
Autogenerated input type of SetPipelineStages
"""
input SetPipelineStagesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  backlogPipelineIds: [ID!]
  sprintBacklogPipelineIds: [ID!]
  inDevelopmentPipelineIds: [ID!]
  inReviewPipelineIds: [ID!]
  completedPipelineIds: [ID!]
  workspaceId: ID!
}

"""
Autogenerated return type of SetPipelineStages.
"""
type SetPipelineStagesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelines: [Pipeline!]!
}

"""
Autogenerated input type of SetPriorityOnPipelineIssues
"""
input SetPriorityOnPipelineIssuesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  priorityId: ID
  pipelineIssueIds: [ID!]!
}

"""
Autogenerated return type of SetPriorityOnPipelineIssues.
"""
type SetPriorityOnPipelineIssuesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineIssues: [PipelineIssue!]!
}

"""
Autogenerated input type of SetPullRequestPipeline
"""
input SetPullRequestPipelineInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceId: ID!
  pipelineId: ID!
}

"""
Autogenerated return type of SetPullRequestPipeline.
"""
type SetPullRequestPipelinePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspace: Workspace!
}

"""
Autogenerated input type of SetWorkspaceViewedNow
"""
input SetWorkspaceViewedNowInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceId: ID!
}

"""
Autogenerated return type of SetWorkspaceViewedNow.
"""
type SetWorkspaceViewedNowPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspace: Workspace!
}

"""
Autogenerated input type of SplitWorkspaceRepository
"""
input SplitWorkspaceRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceId: ID!
  repositoryGhId: Int!
}

"""
Autogenerated return type of SplitWorkspaceRepository.
"""
type SplitWorkspaceRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  splitWorkspace: Workspace!
  workspace: Workspace!
}

"""
A summary of a sprint
"""
type Sprint implements Node & Timestamps {
  closedIssuesCount: Int!
  completedPoints: Float!
  createdAt: ISO8601DateTime!
  description: String
  endAt: ISO8601DateTime!
  generatedName: String
  id: ID!
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection!
  name: String
  persisted: Boolean!

  """
  batching is disabled for this field
  """
  scopeChange(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ScopeChangeConnection!
  sprintIssues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    labelIds: [ID!]
  ): SprintIssueConnection!
  sprintReview: SprintReview
  startAt: ISO8601DateTime!
  state: SprintState!
  totalPoints: Float!
  updatedAt: ISO8601DateTime!
  workspace: Workspace!
}

"""
A configuration for recurring sprints
"""
type SprintConfig implements Node & Timestamps {
  createdAt: ISO8601DateTime!
  endDay: SprintConfigDayOfTheWeek!
  id: ID!
  kind: SprintConfigKind!
  monthlyAttributes: SprintConfigMonthlyAttributes
  name: String!
  period: Int!
  settings: SprintConfigSettings!
  startDay: SprintConfigDayOfTheWeek!
  tzIdentifier: String!
  updatedAt: ISO8601DateTime!
  workspace: Workspace!
}

input SprintConfigCreateInput {
  workspaceId: ID!
  name: String!
  tzIdentifier: String!
  startOn: ISO8601Date!
  endOn: ISO8601Date!
  kind: SprintConfigKind = weekly
  settings: SprintConfigSettingsInput!
}

enum SprintConfigDayOfTheWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

input SprintConfigInput {
  tzIdentifier: String!
  kind: SprintConfigKind = weekly
  period: Int = 2
}

input SprintConfigIssuesFromPipelineInput {
  pipelineId: ID
  totalStoryPoints: Float
  enabled: Boolean!
}

enum SprintConfigKind {
  """
  Weekly cadence sprints
  """
  weekly

  """
  Monthly, calendar-aligned sprints
  """
  monthly
}

type SprintConfigMonthlyAttributes {
  endDay: Int!
  period: Int!
  startDay: Int!
}

type SprintConfigPreview {
  periodInWeeks: Int!
  sprints: [Sprint!]!
}

type SprintConfigSettings {
  issuesFromPipeline: SprintConfigSettingsIssuesFromPipeline!
  moveUnfinishedIssues: Boolean!
}

input SprintConfigSettingsInput {
  moveUnfinishedIssues: Boolean!
  issuesFromPipeline: SprintConfigIssuesFromPipelineInput!
}

type SprintConfigSettingsIssuesFromPipeline {
  enabled: Boolean!
  pipelineId: ID
  totalStoryPoints: Float
}

input SprintConfigUpdateInput {
  workspaceId: ID!
  name: String!
  settings: SprintConfigSettingsInput!
  tzIdentifier: String
  startOn: ISO8601Date
  endOn: ISO8601Date
  kind: SprintConfigKind = weekly
}

"""
The connection type for Sprint.
"""
type SprintConnection {
  """
  A list of edges.
  """
  edges: [SprintEdge!]!

  """
  A list of nodes.
  """
  nodes: [Sprint!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SprintEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sprint!
}

input SprintFiltersInput {
  state: SprintStateInput
  id: SprintIdInput
}

"""
Filter sprint ID column
"""
input SprintIdInput {
  notInAny: Boolean = false
  in: [ID!]
  nin: [ID!]
  specialFilters: SprintSpecialFilter
}

type SprintIssue implements Node & Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  issue: Issue!
  sprint: Sprint!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for SprintIssue.
"""
type SprintIssueConnection {
  """
  A list of edges.
  """
  edges: [SprintIssueEdge!]!

  """
  A list of nodes.
  """
  nodes: [SprintIssue!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SprintIssueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SprintIssue!
}

enum SprintOrderField {
  END_AT
  START_AT
}

"""
Order of Sprint connection
"""
input SprintOrderInput {
  direction: OrderDirection
  field: SprintOrderField
}

"""
A sprint review
"""
type SprintReview implements Node & Timestamps {
  body: String
  createdAt: ISO8601DateTime!
  htmlBody: String

  """
  ID of the object.
  """
  id: ID!
  initiatedBy: ZenhubUser
  issuesClosedAfterSprintReview(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection!
  language: String
  lastGeneratedAt: ISO8601DateTime
  manuallyEdited: Boolean!
  sprint: Sprint!
  sprintReviewFeatures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SprintReviewFeatureConnection!
  sprintReviewSchedules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SprintReviewScheduleConnection!
  state: SprintReviewState!
  title: String
  updatedAt: ISO8601DateTime!
}

"""
A sprint review feature type
"""
type SprintReviewFeature implements Node & Timestamps {
  aiGeneratedIssues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection!
  createdAt: ISO8601DateTime!

  """
  ID of the object.
  """
  id: ID!
  manuallyAddedIssues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection!
  title: String!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for SprintReviewFeature.
"""
type SprintReviewFeatureConnection {
  """
  A list of edges.
  """
  edges: [SprintReviewFeatureEdge!]!

  """
  A list of nodes.
  """
  nodes: [SprintReviewFeature!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SprintReviewFeatureEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SprintReviewFeature!
}

"""
A sprint review schedule
"""
type SprintReviewSchedule implements Node & Timestamps {
  completedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!

  """
  ID of the object.
  """
  id: ID!
  startAt: ISO8601DateTime!
  title: String!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for SprintReviewSchedule.
"""
type SprintReviewScheduleConnection {
  """
  A list of edges.
  """
  edges: [SprintReviewScheduleEdge!]!

  """
  A list of nodes.
  """
  nodes: [SprintReviewSchedule!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SprintReviewScheduleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SprintReviewSchedule!
}

enum SprintReviewState {
  INITIAL
  IN_PROGRESS
  COMPLETED
}

enum SprintSpecialFilter {
  """
  Current sprint
  """
  current_sprint
}

enum SprintState {
  OPEN
  CLOSED
}

"""
Filter by SprintState
"""
input SprintStateInput {
  eq: SprintState!
}

"""
Filter a String column
"""
input StringInput {
  notInAny: Boolean = false
  in: [String!]
  nin: [String!]
}

"""
Activity feed item
"""
type TimelineItem implements Timestamps {
  createdAt: ISO8601DateTime!
  data: JSON
  id: ID!
  key: String!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for TimelineItem.
"""
type TimelineItemConnection {
  """
  A list of edges.
  """
  edges: [TimelineItemEdge!]!

  """
  A list of nodes.
  """
  nodes: [TimelineItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TimelineItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TimelineItem!
}

interface Timestamps {
  createdAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
}

type Unassignable {
  assignee: User!
  issues: [Issue!]!
}

"""
Autogenerated input type of UpdateComment
"""
input UpdateCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  commentId: ID!
  body: String!
}

"""
Autogenerated return type of UpdateComment.
"""
type UpdateCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UpdateEpicDates
"""
input UpdateEpicDatesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  epicId: ID!
  roadmapId: ID
  startOn: ISO8601Date
  endOn: ISO8601Date
}

"""
Autogenerated return type of UpdateEpicDates.
"""
type UpdateEpicDatesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  epic: Epic!
}

"""
Autogenerated input type of UpdateEpicIssuesByIssueInfos
"""
input UpdateEpicIssuesByIssueInfosInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  epic: IssueInfoInput!
  addIssues: [IssueInfoInput!]!
  removeIssues: [IssueInfoInput!]!
}

"""
Autogenerated return type of UpdateEpicIssuesByIssueInfos.
"""
type UpdateEpicIssuesByIssueInfosPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  epic: Epic!
  issuesAdded: [Issue]!
  issuesRemoved: [Issue]!
}

"""
Autogenerated input type of UpdateIssue
"""
input UpdateIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  body: String
  issueId: ID!
  milestoneId: ID
  state: IssueState
  title: String
  aiMetadata: AiMetadataInput
}

"""
Autogenerated return type of UpdateIssue.
"""
type UpdateIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  issue: Issue!
}

"""
Autogenerated input type of UpdatePipelineAutomation
"""
input UpdatePipelineAutomationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineAutomationId: ID!

  """
  Possible values: for labels: { labels: [{ name:, color:}, { name:, color:}] }.
  For assignees: { assignees: [user1_eid, user2_eid] }. To remove all assignees
  pass empty array { assignees: [] }. For sprints: { sprints: [sprint1_eid,
  sprint2_eid] }. For epics: { epics: [epic1_eid, epic2_eid] }. For zenhub
  epics: { zenhubEpics: [epic1_eid, epic2_eid] }. For relative sprints: {
  relativeSprints: [0, 1, 2] }, where numbers are index of sprints from the
  current sprint. To remove all sprints pass empty array { relativeSprints: []
  }. for pipelines: { pipelines: [pipeline1_eid, pipeline2_eid] }
  """
  elementDetails: JSON
}

"""
Autogenerated return type of UpdatePipelineAutomation.
"""
type UpdatePipelineAutomationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineAutomation: PipelineAutomation!
}

"""
Autogenerated input type of UpdatePipelineConfiguration
"""
input UpdatePipelineConfigurationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineId: ID!
  staleIssues: Boolean
  staleInterval: Int
}

"""
Autogenerated return type of UpdatePipelineConfiguration.
"""
type UpdatePipelineConfigurationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineConfiguration: PipelineConfiguration!
}

"""
Autogenerated input type of UpdatePipeline
"""
input UpdatePipelineInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipelineId: ID!
  name: String
  position: Int
  description: String
}

"""
Autogenerated return type of UpdatePipeline.
"""
type UpdatePipelinePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pipeline: Pipeline!
}

"""
Autogenerated input type of UpdateProjectDates
"""
input UpdateProjectDatesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  projectId: ID!
  startOn: ISO8601Date
  endOn: ISO8601Date
  action: ProjectDateAction!
}

"""
Autogenerated return type of UpdateProjectDates.
"""
type UpdateProjectDatesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  project: Project!
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  projectId: ID!
  name: String
  description: String
}

"""
Autogenerated return type of UpdateProject.
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  project: Project!
}

"""
Autogenerated input type of UpdateProjectState
"""
input UpdateProjectStateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  projectId: ID!
  state: ProjectState!
  applyToEpics: Boolean = false
}

"""
Autogenerated return type of UpdateProjectState.
"""
type UpdateProjectStatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  project: Project!
}

"""
Autogenerated input type of UpdateRelease
"""
input UpdateReleaseInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  releaseId: ID!
  release: ReleaseUpdateInput!
}

"""
Autogenerated return type of UpdateRelease.
"""
type UpdateReleasePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  release: Release!
}

"""
Autogenerated input type of UpdateRoadmapKeyDate
"""
input UpdateRoadmapKeyDateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  keyDateId: ID!
  date: ISO8601Date!
  description: String!
  color: String
}

"""
Autogenerated return type of UpdateRoadmapKeyDate.
"""
type UpdateRoadmapKeyDatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  keyDate: KeyDate!
  roadmap: Roadmap!
}

"""
Autogenerated input type of UpdateSavedView
"""
input UpdateSavedViewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  savedViewId: ID!
  name: String

  """
  A full new set of filters
  """
  filters: IssueSearchFiltersInput
}

"""
Autogenerated return type of UpdateSavedView.
"""
type UpdateSavedViewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  savedView: SavedView!
}

"""
Autogenerated input type of UpdateSprintConfig
"""
input UpdateSprintConfigInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  sprintConfig: SprintConfigUpdateInput!
}

"""
Autogenerated return type of UpdateSprintConfig.
"""
type UpdateSprintConfigPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  sprintConfig: SprintConfig!
}

"""
Autogenerated input type of UpdateSprint
"""
input UpdateSprintInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  sprintId: ID!
  name: String
  description: String
}

"""
Autogenerated return type of UpdateSprint.
"""
type UpdateSprintPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  sprint: Sprint!
}

"""
Autogenerated input type of UpdateUserPermissions
"""
input UpdateUserPermissionsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubOrganizationId: ID!
  zenhubUserId: ID!
  role: String!
}

"""
Autogenerated return type of UpdateUserPermissions.
"""
type UpdateUserPermissionsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  role: Roles! @deprecated(reason: "Replaced with a new type")
  zenhubOrgUser: ZenhubUserAtOrganization!
}

"""
Autogenerated input type of UpdateWorkspace
"""
input UpdateWorkspaceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceId: ID!
  name: String!
  description: String
  private: Boolean
  areUploadedFilesPrivate: Boolean
  defaultRepositoryGhId: Int
  assumeEstimates: Boolean
}

"""
Autogenerated return type of UpdateWorkspace.
"""
type UpdateWorkspacePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspace: Workspace!
}

"""
Autogenerated input type of UpdateWorkspaceZenhubUserRole
"""
input UpdateWorkspaceZenhubUserRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspaceId: ID!
  workspaceUserRoles: [WorkspaceRoleInput!]!
}

"""
Autogenerated return type of UpdateWorkspaceZenhubUserRole.
"""
type UpdateWorkspaceZenhubUserRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workspace: Workspace!
}

"""
Autogenerated input type of UpdateZenhubEpicDates
"""
input UpdateZenhubEpicDatesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpicId: ID!
  startOn: ISO8601Date
  endOn: ISO8601Date
}

"""
Autogenerated return type of UpdateZenhubEpicDates.
"""
type UpdateZenhubEpicDatesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpic: ZenhubEpic!
}

"""
Autogenerated input type of UpdateZenhubEpic
"""
input UpdateZenhubEpicInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpicId: ID!
  title: String
  body: String
  aiMetadata: AiMetadataInput
}

"""
Autogenerated input type of UpdateZenhubEpicKeyDate
"""
input UpdateZenhubEpicKeyDateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  keyDateId: ID!
  date: ISO8601Date!
  description: String!
}

"""
Autogenerated return type of UpdateZenhubEpicKeyDate.
"""
type UpdateZenhubEpicKeyDatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  keyDate: KeyDate!
  zenhubEpic: ZenhubEpic!
}

"""
Autogenerated return type of UpdateZenhubEpic.
"""
type UpdateZenhubEpicPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpic: ZenhubEpic!
}

"""
Autogenerated input type of UpdateZenhubEpicState
"""
input UpdateZenhubEpicStateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpicId: ID!
  state: ZenhubEpicState!
  applyToIssues: Boolean = false
}

"""
Autogenerated return type of UpdateZenhubEpicState.
"""
type UpdateZenhubEpicStatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubEpic: ZenhubEpic!
}

"""
Autogenerated input type of UpdateZenhubOrganization
"""
input UpdateZenhubOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubOrganizationId: ID!
  address: String
  defaultPaymentMethod: String
  email: String
  name: String
  nameOnInvoice: String
  taxId: String

  """
  TAX_TYPES id (i.e. eu_vat>austria)
  """
  taxTypeId: String
}

"""
Autogenerated return type of UpdateZenhubOrganization.
"""
type UpdateZenhubOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  zenhubOrganization: ZenhubOrganization!
}

"""
Cache of Github user information. Is inherited from OwnerType.
"""
type User implements Owner & Timestamps {
  avatarUrl: String!
  createdAt: ISO8601DateTime!
  ghId: Int
  hasWorkspace: Boolean!
  id: ID!
  login: String!
  name: String
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection!

  """
  Repositories favorited by this github user
  """
  repositoryFavorites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryFavoriteConnection!
  roadmapItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    state: RoadmapItemStateFilterInput
  ): RoadmapItemConnection!
  searchWorkspaces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String!
    repositoryGhIds: [Int!]
  ): WorkspaceSearchMatchConnection!
  type: String!
  updatedAt: ISO8601DateTime!
  workspaceFavorites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkspaceFavoriteConnection!
  zenhubUser: ZenhubUser
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge!]!

  """
  A list of nodes.
  """
  nodes: [User!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User!
}

type VelocityDiff {
  difference: Float
  sprintsCount: Int!
  velocity: Float!
}

interface ViewerPermission {
  viewerPermission: PermissionLevel!
}

"""
Represents a WIP Limit for a Pipeline
"""
type WipLimit {
  blockPipeline: Boolean!
  id: ID!

  """
  This should follow the format {limitType: limitValue}
  """
  limitValue: JSON!
}

"""
The connection type for WipLimit.
"""
type WipLimitConnection {
  """
  A list of edges.
  """
  edges: [WipLimitEdge!]!

  """
  A list of nodes.
  """
  nodes: [WipLimit!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type WipLimitEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WipLimit!
}

type Workspace implements Timestamps & ViewerPermission {
  activeSprint: Sprint
  areUploadedFilesPrivate: Boolean!
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    login: StringInput
    repositoryGhIds: [Int!]
    query: String
  ): UserConnection
  assumeEstimates: Boolean!
  authors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    login: StringInput
    repositoryGhIds: [Int!]
    query: String
  ): UserConnection

  """
  Average velocity of recently(last 3) closed sprints
  """
  averageSprintVelocity: Float

  """
  Average velocity of recently closed sprints with last sprint influence
  """
  averageSprintVelocityWithDiff(skipDiff: Boolean): VelocityDiff

  """
  Only for querying control chart
  """
  closedPipeline: Pipeline!
  createdAt: ISO8601DateTime!
  creator: ZenhubUser
  defaultRepository: Repository
  description: String
  displayName: String!
  epics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    ids: [ID!]
    repositoryGhIds: [Int!]
    state: IssueStateInput
    query: String
    orderBy: EpicOrderInput
  ): EpicConnection
    @deprecated(reason: "This field must not be used. Use zenhubEpics.")
  hasEstimatedIssues: Boolean!
  id: ID!

  """
  The state of the workspace during repositories import process
  """
  importState: WorkspaceImportState!
  isDeletable: Boolean!
  isEditable: Boolean!
  isFavorite: Boolean!
  issueAssigneeOptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    repositoryIds: [ID!]
    query: String
    ids: StringInput

    """
    List of GH user logins or ZH user emails
    """
    logins: StringInput

    """
    If true, only assignees in use are returned.
    """
    inUse: Boolean
  ): IssueUserOptionConnection
  issueAuthorOptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    repositoryIds: [ID!]
    query: String
    ids: StringInput

    """
    List of GH user logins or ZH user emails
    """
    logins: StringInput
  ): IssueUserOptionConnection

  """
  Returns the issue dependencies from all the repositories of the workspace.
  Optionally, the result can be filtered by repository.
  """
  issueDependencies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    repositoryIds: [ID!]
  ): IssueDependencyConnection
  issueFlowStats(daysInCycle: Int): IssueFlowStats
  issueLabelOptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    name: StringInput
    repositoryIds: [ID!]
    query: String

    """
    If true, only labels in use are returned.
    """
    inUse: Boolean

    """
    If true, workspace labels are included.
    """
    includeWorkspaceLabels: Boolean
  ): IssueLabelOptionConnection
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    repositoryIds: [ID!]
    query: String
    orderBy: IssueOrderInput
  ): IssueConnection

  """
  Only show issues with these labels by default
  """
  labelFilters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkspaceLabelFilterConnection!
  milestoneFilterOptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    title: StringInput
    repositoryGhIds: [Int!]
    query: String
    state: MilestoneState
    ignoreRepositoryPermissions: Boolean
  ): MilestoneConnection
  name: String
  pipelineToPipelineAutomations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PipelineToPipelineAutomationConnection!
  pipelines(includeClosed: Boolean): [Pipeline!]!
    @deprecated(reason: "Use `Workspace.pipelines_connection`.")
  pipelinesConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PipelineConnection!
  previousSprint: Sprint
  priorities: [Priority!]!
    @deprecated(reason: "Use `Workspace.priorities_connection`.")
  prioritiesConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PriorityConnection!
  private: Boolean!
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String
  ): ProjectConnection!

  """
  Workspaces that share at least one repository
  """
  relatedWorkspaces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkspaceConnection!
  releases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    ids: [ID!]
    query: String
    repositoryIds: [ID!]
    state: ReleaseStateInput
  ): ReleaseConnection!
  repositories: [Repository!]
    @deprecated(reason: "Use `Workspace.repositories_connection`.")
  repositoriesConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryConnection
  repositoryGithubProjectImport: RepositoryGithubProjectImport
  roadmap: Roadmap!

  """
  Filter sets saved by the current user
  """
  savedViews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String
  ): SavedViewConnection!
  sharedZenhubRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryConnection!
  sprintConfig: SprintConfig
  sprints(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String
    filters: SprintFiltersInput
    orderBy: SprintOrderInput
  ): SprintConnection!
  upcomingSprint: Sprint
  updatedAt: ISO8601DateTime!
  viewerPermission: PermissionLevel!
  workspaceRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkspaceRepositoryConnection!
  zenhubEpics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String
    filters: ZenhubEpicFiltersInput
    orderBy: ZenhubEpicOrderInput
  ): ZenhubEpicConnection
  zenhubIssueByNumber(number: Int!): Issue
  zenhubLabels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String
  ): ZenhubLabelConnection
  zenhubOrganization: ZenhubOrganization!
  zenhubOwner: ZenhubIdentity
  zenhubRepository: Repository
  zenhubUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String
    filters: ZenhubUsersFiltersInput
  ): ZenhubUserConnection!
}

input WorkspaceConfigInput {
  pipelines: [PipelineConfigInput!]
  sprintConfig: SprintConfigInput
}

"""
The connection type for Workspace.
"""
type WorkspaceConnection {
  """
  A list of edges.
  """
  edges: [WorkspaceEdge!]!

  """
  A list of nodes.
  """
  nodes: [Workspace!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type WorkspaceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Workspace!
}

"""
A favorited workspace
"""
type WorkspaceFavorite implements Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
  workspace: Workspace!
}

"""
The connection type for WorkspaceFavorite.
"""
type WorkspaceFavoriteConnection {
  """
  A list of edges.
  """
  edges: [WorkspaceFavoriteEdge!]!

  """
  A list of nodes.
  """
  nodes: [WorkspaceFavorite!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type WorkspaceFavoriteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WorkspaceFavorite!
}

enum WorkspaceImportState {
  PENDING
  IN_PROGRESS
  USABLE
  COMPLETED
}

type WorkspaceLabelFilter {
  id: ID!
  labelName: String!
  workspace: Workspace!
  zenhubLabel: ZenhubLabel
}

"""
The connection type for WorkspaceLabelFilter.
"""
type WorkspaceLabelFilterConnection {
  """
  A list of edges.
  """
  edges: [WorkspaceLabelFilterEdge!]!

  """
  A list of nodes.
  """
  nodes: [WorkspaceLabelFilter!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type WorkspaceLabelFilterEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WorkspaceLabelFilter!
}

type WorkspaceMatch {
  workspace: Workspace!
}

"""
Order of Workspace connection
"""
input WorkspaceOrderInput {
  direction: OrderDirection
}

"""
A connection between a workspace and a repository
"""
type WorkspaceRepository implements Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  readModeEnabled: Boolean!
  repository: Repository!
  updatedAt: ISO8601DateTime!
  workspace: Workspace!
}

"""
The connection type for WorkspaceRepository.
"""
type WorkspaceRepositoryConnection {
  """
  A list of edges.
  """
  edges: [WorkspaceRepositoryEdge!]!

  """
  A list of nodes.
  """
  nodes: [WorkspaceRepository!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type WorkspaceRepositoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WorkspaceRepository!
}

input WorkspaceRoleInput {
  zenhubUserId: ID!
}

union WorkspaceSearchMatch = RepositoryMatch | WorkspaceMatch

"""
The connection type for WorkspaceSearchMatch.
"""
type WorkspaceSearchMatchConnection {
  """
  A list of edges.
  """
  edges: [WorkspaceSearchMatchEdge!]!

  """
  A list of nodes.
  """
  nodes: [WorkspaceSearchMatch!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type WorkspaceSearchMatchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WorkspaceSearchMatch
}

type WorkspaceSharedZenhubRepository implements Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
  workspace: Workspace!
  zenhubRepository: Repository!
}

"""
New epics entity
"""
type ZenhubEpic implements ActivityFeedField & Node & RoadmapItemDates & Timestamps & ViewerPermission & ZenhubEpicIssueProgress {
  activityFeed(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    skipTimelineItems: Boolean
  ): ActivityFeedConnection
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ZenhubUserConnection!

  """
  Dependencies that are blocked by this zenhub_epic
  """
  blockedItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    filters: IssueDependencyItemFiltersInput
  ): IssueDependencyItemConnection!

  """
  Dependencies that are blocking this zenhub_epic
  """
  blockingItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    filters: IssueDependencyItemFiltersInput
  ): IssueDependencyItemConnection!
  body: String
  childIssues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    workspaceId: ID!
  ): IssueConnection!
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommentConnection!
  createdAt: ISO8601DateTime!
  creator: ZenhubUser
  endOn(roadmapId: ID): ISO8601Date
  estimate: Estimate
  htmlBody: String
  id: ID!
  keyDates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): KeyDateConnection!
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection!
  oldIssue: Issue
  project: Project

  """
  Dependencies that are related to this zenhub_epic
  """
  relatedItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    filters: IssueDependencyItemFiltersInput
  ): IssueDependencyItemConnection!
  startOn(roadmapId: ID): ISO8601Date
  state: ZenhubEpicState!
  title: String!
  updatedAt: ISO8601DateTime!
  viewerPermission: PermissionLevel!
  zenhubIssueCountProgress: IssueCountProgress
  zenhubIssueEstimateProgress: IssueEstimateProgress
  zenhubOrganization: ZenhubOrganization!
}

"""
The connection type for ZenhubEpic.
"""
type ZenhubEpicConnection {
  """
  A list of edges.
  """
  edges: [ZenhubEpicEdge!]!

  """
  A list of nodes.
  """
  nodes: [ZenhubEpic!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ZenhubEpicEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ZenhubEpic!
}

"""
Filters for ZenhubEpic connection
"""
input ZenhubEpicFiltersInput {
  matchType: MatchingFilter = all
  state: ZenhubEpicStateFilterInput
  labelIds: IdInput
  projectIds: IdInput
  estimateValues: FloatInput
  assigneeIds: IdInput
  id: IdInput
}

input ZenhubEpicInput {
  title: String!
  body: String
}

interface ZenhubEpicIssueProgress {
  zenhubIssueCountProgress: IssueCountProgress
  zenhubIssueEstimateProgress: IssueEstimateProgress
}

"""
Filter issue search results
"""
input ZenhubEpicIssueSearchFiltersInput {
  workspaces: IdInput
}

enum ZenhubEpicOrderField {
  CREATED_AT
  UPDATED_AT
  TITLE
  START_ON
  END_ON
  STATE
  ASSIGNEES
}

"""
Order of ZenhubEpic connection
"""
input ZenhubEpicOrderInput {
  direction: OrderDirection
  field: ZenhubEpicOrderField
}

"""
Filter issues by special Zenhub epic filters
"""
input ZenhubEpicSearchFiltersInput {
  id: IdInput
  specialFilters: ZenhubEpicSpecialFilter
}

enum ZenhubEpicSpecialFilter {
  """
  Show all issues not in an epic
  """
  not_in_epic
}

enum ZenhubEpicState {
  OPEN
  TODO
  IN_PROGRESS
  CLOSED
}

"""
Filter for ZenhubEpic state
"""
input ZenhubEpicStateFilterInput {
  in: [ZenhubEpicState!]
  nin: [ZenhubEpicState!]
}

union ZenhubIdentity = ZenhubOrganization | ZenhubUser

type ZenhubLabel implements Node & Timestamps {
  color: String
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime!
  zenhubEpics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ZenhubEpicConnection!
  zenhubOrganization: ZenhubOrganization!
}

"""
The connection type for ZenhubLabel.
"""
type ZenhubLabelConnection {
  """
  A list of edges.
  """
  edges: [ZenhubLabelEdge!]!

  """
  A list of nodes.
  """
  nodes: [ZenhubLabel!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ZenhubLabelEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ZenhubLabel!
}

"""
This is a root entity for Zenhub. Contains workspaces, users, and other Zenhub data.
"""
type ZenhubOrganization implements Node & Timestamps {
  createdAt: ISO8601DateTime!
  creator: ZenhubUser

  """
  Optional. Returns cache of associated Github organization
  """
  githubOrganization: Organization
  id: ID!
  name: String
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String
  ): ProjectConnection!
  roadmapItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    state: RoadmapItemStateFilterInput
    order: RoadmapItemOrderInput = { field: end_on, direction: ASC }
    query: String
    startOn: ISO8601Date
    endOn: ISO8601Date
  ): RoadmapItemConnection!
  updatedAt: ISO8601DateTime!
  workspaces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String
    orderBy: WorkspaceOrderInput
  ): WorkspaceConnection!
  zenhubLabels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ZenhubLabelConnection!
  zenhubUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    platformOnly: Boolean

    """
    When provideed, it filters the returned users by the given emails
    """
    emails: [String!]
    order: ZenhubUserOrderInput
    query: String
  ): ZenhubUserConnection
    @deprecated(
      reason: "Use ZenhubOrganizationType.zenhub_users_at_organization instead"
    )

  """
  Returns all Zenhub users at the organization.
  """
  zenhubUsersAtOrganization(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    platformOnly: Boolean

    """
    When provideed, it filters the returned users by the given emails
    """
    emails: [String!]
    order: ZenhubUserOrderInput
    query: String

    """
    When provided, filters returned users by seated status
    """
    seated: Boolean

    """
    When provided, filters returned users by whether a seat request is pending
    """
    seatRequestPending: Boolean

    """
    When provided, filters by role
    """
    role: Roles

    """
    Include external users with write permission
    """
    includeExternal: Boolean
  ): ZenhubUserAtOrganizationConnection
}

"""
The connection type for ZenhubOrganization.
"""
type ZenhubOrganizationConnection {
  """
  A list of edges.
  """
  edges: [ZenhubOrganizationEdge!]!

  """
  A list of nodes.
  """
  nodes: [ZenhubOrganization!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ZenhubOrganizationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ZenhubOrganization!
}

type ZenhubOrganizationLimited implements Node & Timestamps {
  createdAt: ISO8601DateTime!

  """
  ID of the object.
  """
  id: ID!
  name: String
  updatedAt: ISO8601DateTime!
}

type ZenhubUser implements Node & Timestamps {
  contactEmail: String
  createdAt: ISO8601DateTime!
  email: String
  estimationGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    workspaceId: ID!
  ): EstimationGroupConnection!
  externalOnly: Boolean!
  githubUser: User
  id: ID!
  imageUrl: String
  name: String
  role(zenhubOrganizationId: ID!): Roles
    @deprecated(
      reason: "Use ZenhubOrganizationType#zenhub_users_at_organization or viewer_at_organization instead"
    )
  searchWorkspaces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String!
  ): WorkspaceConnection!
  updatedAt: ISO8601DateTime!
  workspaceFavorites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkspaceFavoriteConnection!
  zenhubOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String
  ): ZenhubOrganizationConnection!
}

type ZenhubUserAtOrganization implements Node & Timestamps {
  contactEmail: String
  createdAt: ISO8601DateTime!
  email: String
  estimationGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    workspaceId: ID!
  ): EstimationGroupConnection!
  externalOnly: Boolean!
  githubUser: User
  id: ID!
  imageUrl: String
  name: String
  role: Roles
  searchWorkspaces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String!
  ): WorkspaceConnection!
  seatRequestedAt: ISO8601DateTime
  seated: Boolean
  updatedAt: ISO8601DateTime!
  workspaceFavorites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkspaceFavoriteConnection!
  zenhubOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String
  ): ZenhubOrganizationConnection!
}

"""
The connection type for ZenhubUserAtOrganization.
"""
type ZenhubUserAtOrganizationConnection {
  """
  A list of edges.
  """
  edges: [ZenhubUserAtOrganizationEdge!]!

  """
  A list of nodes.
  """
  nodes: [ZenhubUserAtOrganization!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ZenhubUserAtOrganizationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ZenhubUserAtOrganization!
}

"""
The connection type for ZenhubUser.
"""
type ZenhubUserConnection {
  """
  A list of edges.
  """
  edges: [ZenhubUserEdge!]!

  """
  A list of nodes.
  """
  nodes: [ZenhubUser!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ZenhubUserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ZenhubUser!
}

enum ZenhubUserOrderField {
  DISPLAY_NAME
}

"""
Order of ZenhubUser connection
"""
input ZenhubUserOrderInput {
  direction: OrderDirection
  field: ZenhubUserOrderField
}

input ZenhubUsersAssignedEpicsEachSprintCountComparison {
  value: Int!
  sprintIds: [ID!]!
}

input ZenhubUsersAssignedIssuesCountComparison {
  value: Int!
  sprintIds: [ID!]
}

"""
Filter for zenhub users search
"""
input ZenhubUsersFiltersInput {
  """
  Apply last assigned at comparison filter
  """
  lastAssignedAtComparison: ZenhubUsersLastAssignedAtComparison

  """
  Apply assigned issues count comparison filter
  """
  assignedIssuesCountComparison: ZenhubUsersAssignedIssuesCountComparison

  """
  Apply assigned epics each sprint count comparison filter
  """
  assignedEpicsEachSprintCountComparison: ZenhubUsersAssignedEpicsEachSprintCountComparison

  """
  Include external members in the search
  """
  includeExternalMembers: Boolean
}

input ZenhubUsersLastAssignedAtComparison {
  value: ISO8601DateTime!
  includeNulls: Boolean
  sprintIds: [ID!]
}
